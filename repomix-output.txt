This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: logs/, **/*.log, **/npm-debug.log*, **/yarn-debug.log*, **/yarn-error.log*, **/pnpm-debug.log*, **/lerna-debug.log*, node_modules/, dist/, dist-ssr/, **/*.local, .vscode/, */.DS_Store, **/*.suo, **/*.ntvs*, **/*.njsproj, **/*.sln, **/*.sw?, target/, gen/schemas/, bun.lock, **/*.svg, **/*.gd.uid, **/*.xcodeproj, **/*pbxproj
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
server/
  cmd/
    main.go
  pb_migrations/
    1741822111_created_events.js
    1741822190_created_roles.js
    1741822235_created_assignees.js
    1741822681_created_members.js
    1741822786_created_member_preferences.js
    1741822811_updated_assignees.js
    1741825207_updated_events.js
    1741825243_updated_events.js
    1741825267_updated_events.js
    1741825364_updated_events.js
    1742245247_created_organisations.js
    1742245375_updated_users.js
    1742767104_updated_users.js
    1742768283_updated_events.js
    1742768589_updated_member_preferences.js
    1742768630_updated_members.js
    1742768667_updated_members.js
    1742769021_updated_users.js
    1742769102_updated_events.js
    1742769129_updated_member_preferences.js
    1742769143_updated_members.js
    1742769320_updated_roles.js
    1742769382_updated_organisations.js
    1742769457_updated_members.js
    1742769474_updated_member_preferences.js
    1742769485_updated_events.js
    1742769553_updated_assignees.js
    1742769584_updated_organisations.js
    1742769598_updated_roles.js
    1742769962_updated_organisations.js
    1742769973_updated_members.js
    1742772368_updated_events.js
  go.mod
src/
  components/
    ActionMenu.tsx
    CheckButton.tsx
    ConfirmDialog.tsx
    Loader.tsx
    Navbar.tsx
    StatusIndicator.tsx
  hooks/
    useAuth.ts
  layouts/
    AnimatedOutlet.tsx
    AuthLayout.tsx
    Layout.tsx
    PageLayout.tsx
  modules/
    auth/
      getLatestUserRecord.ts
      getUser.ts
    initialisation/
      routines/
        hijackFetch.ts
        subscribeToConnectionStatus.ts
      asyncInit.ts
      Initialiser.tsx
      LoaderGate.tsx
    members/
      MembersList.tsx
    pocketbase/
      pb.ts
    roles/
      IconPicker.tsx
      RoleForm.tsx
      roleIcons.ts
      RolesList.tsx
      RolesToolbar.tsx
    scheduler/
      MonthlyView/
        CalendarDay.tsx
        EventPopover.tsx
        MonthlyView.tsx
      utils/
        areEventsOnDay.ts
      WeeklyView/
        EventCard/
          EventCard.tsx
          EventRole.tsx
        Day.tsx
        EventForm.tsx
        WeeklyView.tsx
      Events.tsx
      SchedulerToolbar.tsx
    settings/
      MeetingSettings.tsx
    state/
      app/
        appSlice.ts
      events/
        selectors/
          createSelectEventsForRange.ts
        concretiseProjectedEvent.ts
        eventsSlice.ts
        projectMeetingEvents.ts
      members/
        membersSlice.ts
        preferencesSlice.ts
      pocketbase/
        authSlice.ts
        usePbStore.ts
      roles/
        selectors/
          createSelectRoles.ts
        rolesSlice.ts
      settings/
        settingsSlice.ts
      utils/
        createSelectors.ts
        handleCollectionEvent.ts
        subscribeToCollection.ts
      useAppState.ts
  providers/
    DialogProvider.tsx
  theme/
    customisations/
      data-display.ts
      feedback.ts
      inputs.ts
      navigation.ts
      surfaces.ts
    colorSchemes.ts
    primatives.ts
    theme.ts
  types/
    assignees/
      AssigneePreferences.ts
    auth/
      LoginParams.ts
      PermissionLevel.ts
    state/
      StateGetter.ts
      StateSetter.ts
    pb_types.ts
    Role.ts
  utils/
    logger.ts
  views/
    auth/
      LoginView.tsx
      RegisterOrganisationView.tsx
      RegisterView.tsx
    developer/
      ThemePreviewView.tsx
    settings/
      MeetingSettingsView.tsx
      SettingsView.tsx
    404.tsx
    MembersView.tsx
    RolesView.tsx
    ScheduleView.tsx
  App.tsx
  main.tsx
  vite-env.d.ts
src-tauri/
  capabilities/
    default.json
  gen/
    apple/
      Assets.xcassets/
        AppIcon.appiconset/
          Contents.json
        Contents.json
      quibble_iOS/
        Info.plist
        quibble_iOS.entitlements
      quibble.xcodeproj/
        project.xcworkspace/
          xcshareddata/
            WorkspaceSettings.xcsettings
          contents.xcworkspacedata
        xcshareddata/
          xcschemes/
            quibble_iOS.xcscheme
      Sources/
        quibble/
          bindings/
            bindings.h
          main.mm
      .gitignore
      ExportOptions.plist
      LaunchScreen.storyboard
      Podfile
      project.yml
  src/
    lib.rs
    main.rs
  .gitignore
  build.rs
  Cargo.toml
  tauri.conf.json
.gitattributes
.gitignore
biome.json
index.html
package.json
README.md
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: server/cmd/main.go
================
package main

import (
	"log"
	"net/http"

	"github.com/pocketbase/pocketbase"
	"github.com/pocketbase/pocketbase/core"
)

func main() {
	app := pocketbase.New()

	app.OnServe().BindFunc(func(se *core.ServeEvent) error {
		se.Router.GET("/hello", func(e *core.RequestEvent) error {
			name := e.Request.PathValue("name")

			return e.String(http.StatusOK, "Hello "+name)
		})

		return se.Next()
	})

	app.OnBootstrap().BindFunc(func(e *core.BootstrapEvent) error {
		err := e.Next()
		if err != nil {
			return err
		}

		// do some bootstrapping here

		return nil
	})

	app.OnRecordCreate("organisations").BindFunc(func(e *core.RecordEvent) error {
		e.Next()

		record := e.Record
		userId := record.GetString("owner_id")

		if userId != "" {
			// get the user and update their org_ids with the new organisation
			user, err := app.FindRecordById("users", userId)
			if err != nil {
				log.Printf("Error finding user %s: %v", userId, err)
				return err
			}

			user.Set("org_ids", append(user.GetStringSlice("org_ids"), record.Id))

			err = app.Save(user)
			if err != nil {
				log.Printf("Error saving user %s: %v", userId, err)
				return err
			}

			// add this user as an "owner" member of the organisation
			membersCol, err := app.FindCollectionByNameOrId("members")
			if err != nil {
				log.Printf("Error finding collection members: %v", err)
				return err
			}

			member := core.NewRecord(membersCol)

			member.Set("name", user.GetString("name"))
			member.Set("active", true)
			member.Set("permission_level", 4)

			member.Set("owner_id", userId)
			member.Set("user_id", userId)
			member.Set("org_id", record.Id)

			err = app.Save(member)
			if err != nil {
				log.Printf("Error creating member for user %s in organisation %s: %v", userId, record.Id, err)
				return err
			}

		}
		return nil
	})

	app.OnRecordCreateRequest().BindFunc(func(e *core.RecordRequestEvent) error {
		auth := e.Auth
		if auth != nil {
			userId := auth.Id

			collection := e.Record.Collection()

			userIdField := collection.Fields.GetByName("owner_id")
			if userIdField != nil {
				e.Record.Set("owner_id", userId)
			}
		}
		return e.Next()
	})

	// Must start PocketBase before doing any queries
	err := app.Start()
	if err != nil {
		log.Fatalf("Failed to start PocketBase: %v", err)
	}
}

================
File: server/pb_migrations/1741822111_created_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = new Collection({
    "createRule": null,
    "deleteRule": null,
    "fields": [
      {
        "autogeneratePattern": "[a-z0-9]{15}",
        "hidden": false,
        "id": "text3208210256",
        "max": 15,
        "min": 15,
        "name": "id",
        "pattern": "^[a-z0-9]+$",
        "presentable": false,
        "primaryKey": true,
        "required": true,
        "system": true,
        "type": "text"
      },
      {
        "autogeneratePattern": "",
        "hidden": false,
        "id": "text724990059",
        "max": 0,
        "min": 0,
        "name": "title",
        "pattern": "",
        "presentable": false,
        "primaryKey": false,
        "required": true,
        "system": false,
        "type": "text"
      },
      {
        "autogeneratePattern": "",
        "hidden": false,
        "id": "text1843675174",
        "max": 0,
        "min": 0,
        "name": "description",
        "pattern": "",
        "presentable": false,
        "primaryKey": false,
        "required": false,
        "system": false,
        "type": "text"
      },
      {
        "hidden": false,
        "id": "date2862495610",
        "max": "",
        "min": "",
        "name": "date",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "date"
      },
      {
        "hidden": false,
        "id": "autodate2990389176",
        "name": "created",
        "onCreate": true,
        "onUpdate": false,
        "presentable": false,
        "system": false,
        "type": "autodate"
      },
      {
        "hidden": false,
        "id": "autodate3332085495",
        "name": "updated",
        "onCreate": true,
        "onUpdate": true,
        "presentable": false,
        "system": false,
        "type": "autodate"
      }
    ],
    "id": "pbc_1687431684",
    "indexes": [],
    "listRule": null,
    "name": "events",
    "system": false,
    "type": "base",
    "updateRule": null,
    "viewRule": null
  });

  return app.save(collection);
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684");

  return app.delete(collection);
})

================
File: server/pb_migrations/1741822190_created_roles.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = new Collection({
    "createRule": null,
    "deleteRule": null,
    "fields": [
      {
        "autogeneratePattern": "[a-z0-9]{15}",
        "hidden": false,
        "id": "text3208210256",
        "max": 15,
        "min": 15,
        "name": "id",
        "pattern": "^[a-z0-9]+$",
        "presentable": false,
        "primaryKey": true,
        "required": true,
        "system": true,
        "type": "text"
      },
      {
        "autogeneratePattern": "",
        "hidden": false,
        "id": "text1579384326",
        "max": 0,
        "min": 0,
        "name": "name",
        "pattern": "",
        "presentable": false,
        "primaryKey": false,
        "required": true,
        "system": false,
        "type": "text"
      },
      {
        "autogeneratePattern": "",
        "hidden": false,
        "id": "text1843675174",
        "max": 0,
        "min": 0,
        "name": "description",
        "pattern": "",
        "presentable": false,
        "primaryKey": false,
        "required": false,
        "system": false,
        "type": "text"
      },
      {
        "autogeneratePattern": "",
        "hidden": false,
        "id": "text1704208859",
        "max": 0,
        "min": 0,
        "name": "icon",
        "pattern": "",
        "presentable": false,
        "primaryKey": false,
        "required": true,
        "system": false,
        "type": "text"
      },
      {
        "hidden": false,
        "id": "number2131265523",
        "max": null,
        "min": null,
        "name": "minAssignments",
        "onlyInt": false,
        "presentable": false,
        "required": false,
        "system": false,
        "type": "number"
      },
      {
        "hidden": false,
        "id": "number3324910722",
        "max": null,
        "min": null,
        "name": "maxAssignments",
        "onlyInt": false,
        "presentable": false,
        "required": false,
        "system": false,
        "type": "number"
      },
      {
        "hidden": false,
        "id": "autodate2990389176",
        "name": "created",
        "onCreate": true,
        "onUpdate": false,
        "presentable": false,
        "system": false,
        "type": "autodate"
      },
      {
        "hidden": false,
        "id": "autodate3332085495",
        "name": "updated",
        "onCreate": true,
        "onUpdate": true,
        "presentable": false,
        "system": false,
        "type": "autodate"
      }
    ],
    "id": "pbc_2105053228",
    "indexes": [],
    "listRule": null,
    "name": "roles",
    "system": false,
    "type": "base",
    "updateRule": null,
    "viewRule": null
  });

  return app.save(collection);
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_2105053228");

  return app.delete(collection);
})

================
File: server/pb_migrations/1741822235_created_assignees.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = new Collection({
    "createRule": null,
    "deleteRule": null,
    "fields": [
      {
        "autogeneratePattern": "[a-z0-9]{15}",
        "hidden": false,
        "id": "text3208210256",
        "max": 15,
        "min": 15,
        "name": "id",
        "pattern": "^[a-z0-9]+$",
        "presentable": false,
        "primaryKey": true,
        "required": true,
        "system": true,
        "type": "text"
      },
      {
        "cascadeDelete": false,
        "collectionId": "pbc_1687431684",
        "hidden": false,
        "id": "relation1912072331",
        "maxSelect": 1,
        "minSelect": 0,
        "name": "event_id",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "relation"
      },
      {
        "cascadeDelete": false,
        "collectionId": "pbc_2105053228",
        "hidden": false,
        "id": "relation3590529708",
        "maxSelect": 1,
        "minSelect": 0,
        "name": "role_id",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "relation"
      },
      {
        "hidden": false,
        "id": "autodate2990389176",
        "name": "created",
        "onCreate": true,
        "onUpdate": false,
        "presentable": false,
        "system": false,
        "type": "autodate"
      },
      {
        "hidden": false,
        "id": "autodate3332085495",
        "name": "updated",
        "onCreate": true,
        "onUpdate": true,
        "presentable": false,
        "system": false,
        "type": "autodate"
      }
    ],
    "id": "pbc_1995438148",
    "indexes": [],
    "listRule": null,
    "name": "assignees",
    "system": false,
    "type": "base",
    "updateRule": null,
    "viewRule": null
  });

  return app.save(collection);
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1995438148");

  return app.delete(collection);
})

================
File: server/pb_migrations/1741822681_created_members.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = new Collection({
    "createRule": null,
    "deleteRule": null,
    "fields": [
      {
        "autogeneratePattern": "[a-z0-9]{15}",
        "hidden": false,
        "id": "text3208210256",
        "max": 15,
        "min": 15,
        "name": "id",
        "pattern": "^[a-z0-9]+$",
        "presentable": false,
        "primaryKey": true,
        "required": true,
        "system": true,
        "type": "text"
      },
      {
        "autogeneratePattern": "",
        "hidden": false,
        "id": "text1579384326",
        "max": 0,
        "min": 0,
        "name": "name",
        "pattern": "",
        "presentable": false,
        "primaryKey": false,
        "required": false,
        "system": false,
        "type": "text"
      },
      {
        "hidden": false,
        "id": "bool1260321794",
        "name": "active",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "bool"
      },
      {
        "hidden": false,
        "id": "autodate2990389176",
        "name": "created",
        "onCreate": true,
        "onUpdate": false,
        "presentable": false,
        "system": false,
        "type": "autodate"
      },
      {
        "hidden": false,
        "id": "autodate3332085495",
        "name": "updated",
        "onCreate": true,
        "onUpdate": true,
        "presentable": false,
        "system": false,
        "type": "autodate"
      }
    ],
    "id": "pbc_3572739349",
    "indexes": [],
    "listRule": null,
    "name": "members",
    "system": false,
    "type": "base",
    "updateRule": null,
    "viewRule": null
  });

  return app.save(collection);
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349");

  return app.delete(collection);
})

================
File: server/pb_migrations/1741822786_created_member_preferences.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = new Collection({
    "createRule": null,
    "deleteRule": null,
    "fields": [
      {
        "autogeneratePattern": "[a-z0-9]{15}",
        "hidden": false,
        "id": "text3208210256",
        "max": 15,
        "min": 15,
        "name": "id",
        "pattern": "^[a-z0-9]+$",
        "presentable": false,
        "primaryKey": true,
        "required": true,
        "system": true,
        "type": "text"
      },
      {
        "cascadeDelete": false,
        "collectionId": "pbc_3572739349",
        "hidden": false,
        "id": "relation1972884478",
        "maxSelect": 1,
        "minSelect": 0,
        "name": "member_id",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "relation"
      },
      {
        "cascadeDelete": false,
        "collectionId": "pbc_2105053228",
        "hidden": false,
        "id": "relation1767976795",
        "maxSelect": 999,
        "minSelect": 0,
        "name": "preferred_roles",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "relation"
      },
      {
        "cascadeDelete": false,
        "collectionId": "pbc_2105053228",
        "hidden": false,
        "id": "relation2449561968",
        "maxSelect": 999,
        "minSelect": 0,
        "name": "avoided_roles",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "relation"
      },
      {
        "hidden": false,
        "id": "number1605452679",
        "max": null,
        "min": null,
        "name": "max_per_month",
        "onlyInt": false,
        "presentable": false,
        "required": false,
        "system": false,
        "type": "number"
      },
      {
        "hidden": false,
        "id": "number140124418",
        "max": null,
        "min": null,
        "name": "min_gap_days",
        "onlyInt": false,
        "presentable": false,
        "required": false,
        "system": false,
        "type": "number"
      },
      {
        "hidden": false,
        "id": "autodate2990389176",
        "name": "created",
        "onCreate": true,
        "onUpdate": false,
        "presentable": false,
        "system": false,
        "type": "autodate"
      },
      {
        "hidden": false,
        "id": "autodate3332085495",
        "name": "updated",
        "onCreate": true,
        "onUpdate": true,
        "presentable": false,
        "system": false,
        "type": "autodate"
      }
    ],
    "id": "pbc_1512136413",
    "indexes": [],
    "listRule": null,
    "name": "member_preferences",
    "system": false,
    "type": "base",
    "updateRule": null,
    "viewRule": null
  });

  return app.save(collection);
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1512136413");

  return app.delete(collection);
})

================
File: server/pb_migrations/1741822811_updated_assignees.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1995438148")

  // add field
  collection.fields.addAt(3, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_3572739349",
    "hidden": false,
    "id": "relation1972884478",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "member_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1995438148")

  // remove field
  collection.fields.removeById("relation1972884478")

  return app.save(collection)
})

================
File: server/pb_migrations/1741825207_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(3, new Field({
    "hidden": false,
    "id": "date2862495610",
    "max": "",
    "min": "",
    "name": "date",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "date"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(3, new Field({
    "hidden": false,
    "id": "date2862495610",
    "max": "",
    "min": "",
    "name": "date",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "date"
  }))

  return app.save(collection)
})

================
File: server/pb_migrations/1741825243_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // add field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_2105053228",
    "hidden": false,
    "id": "relation2942447224",
    "maxSelect": 999,
    "minSelect": 0,
    "name": "requiredRoles",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // remove field
  collection.fields.removeById("relation2942447224")

  return app.save(collection)
})

================
File: server/pb_migrations/1741825267_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_2105053228",
    "hidden": false,
    "id": "relation2942447224",
    "maxSelect": 999,
    "minSelect": 0,
    "name": "requiredRoles",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_2105053228",
    "hidden": false,
    "id": "relation2942447224",
    "maxSelect": 999,
    "minSelect": 0,
    "name": "requiredRoles",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
})

================
File: server/pb_migrations/1741825364_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_2105053228",
    "hidden": false,
    "id": "relation2942447224",
    "maxSelect": 999,
    "minSelect": 0,
    "name": "required_role_ids",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_2105053228",
    "hidden": false,
    "id": "relation2942447224",
    "maxSelect": 999,
    "minSelect": 0,
    "name": "requiredRoles",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
})

================
File: server/pb_migrations/1742245247_created_organisations.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = new Collection({
    "createRule": null,
    "deleteRule": null,
    "fields": [
      {
        "autogeneratePattern": "[a-z0-9]{15}",
        "hidden": false,
        "id": "text3208210256",
        "max": 15,
        "min": 15,
        "name": "id",
        "pattern": "^[a-z0-9]+$",
        "presentable": false,
        "primaryKey": true,
        "required": true,
        "system": true,
        "type": "text"
      },
      {
        "autogeneratePattern": "",
        "hidden": false,
        "id": "text1579384326",
        "max": 0,
        "min": 0,
        "name": "name",
        "pattern": "",
        "presentable": false,
        "primaryKey": false,
        "required": false,
        "system": false,
        "type": "text"
      },
      {
        "cascadeDelete": false,
        "collectionId": "_pb_users_auth_",
        "hidden": false,
        "id": "relation2117886457",
        "maxSelect": 1,
        "minSelect": 0,
        "name": "owner_id",
        "presentable": false,
        "required": false,
        "system": false,
        "type": "relation"
      },
      {
        "hidden": false,
        "id": "autodate2990389176",
        "name": "created",
        "onCreate": true,
        "onUpdate": false,
        "presentable": false,
        "system": false,
        "type": "autodate"
      },
      {
        "hidden": false,
        "id": "autodate3332085495",
        "name": "updated",
        "onCreate": true,
        "onUpdate": true,
        "presentable": false,
        "system": false,
        "type": "autodate"
      }
    ],
    "id": "pbc_1053844701",
    "indexes": [],
    "listRule": null,
    "name": "organisations",
    "system": false,
    "type": "base",
    "updateRule": null,
    "viewRule": null
  });

  return app.save(collection);
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1053844701");

  return app.delete(collection);
})

================
File: server/pb_migrations/1742245375_updated_users.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("_pb_users_auth_")

  // add field
  collection.fields.addAt(8, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation2657817989",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "organisation_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("_pb_users_auth_")

  // remove field
  collection.fields.removeById("relation2657817989")

  return app.save(collection)
})

================
File: server/pb_migrations/1742767104_updated_users.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("_pb_users_auth_")

  // add field
  collection.fields.addAt(9, new Field({
    "hidden": false,
    "id": "number1282253152",
    "max": null,
    "min": 0,
    "name": "permission_level",
    "onlyInt": true,
    "presentable": false,
    "required": false,
    "system": false,
    "type": "number"
  }))

  // update field
  collection.fields.addAt(8, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation2657817989",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("_pb_users_auth_")

  // remove field
  collection.fields.removeById("number1282253152")

  // update field
  collection.fields.addAt(8, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation2657817989",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "organisation_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
})

================
File: server/pb_migrations/1742768283_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update collection data
  unmarshal({
    "createRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 1",
    "deleteRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 1",
    "listRule": "org_id.id = @request.auth.org_id",
    "updateRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 1",
    "viewRule": "org_id.id = @request.auth.org_id"
  }, collection)

  // add field
  collection.fields.addAt(5, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  // add field
  collection.fields.addAt(6, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update collection data
  unmarshal({
    "createRule": null,
    "deleteRule": null,
    "listRule": null,
    "updateRule": null,
    "viewRule": null
  }, collection)

  // remove field
  collection.fields.removeById("relation4102257691")

  // remove field
  collection.fields.removeById("relation2809058197")

  return app.save(collection)
})

================
File: server/pb_migrations/1742768589_updated_member_preferences.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1512136413")

  // update collection data
  unmarshal({
    "createRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "deleteRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "listRule": "org_id.id = @request.auth.org_id",
    "updateRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "viewRule": "org_id.id = @request.auth.org_id"
  }, collection)

  // add field
  collection.fields.addAt(6, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  // add field
  collection.fields.addAt(7, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1512136413")

  // update collection data
  unmarshal({
    "createRule": null,
    "deleteRule": null,
    "listRule": null,
    "updateRule": null,
    "viewRule": null
  }, collection)

  // remove field
  collection.fields.removeById("relation4102257691")

  // remove field
  collection.fields.removeById("relation2809058197")

  return app.save(collection)
})

================
File: server/pb_migrations/1742768630_updated_members.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // add field
  collection.fields.addAt(3, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  // add field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // remove field
  collection.fields.removeById("relation4102257691")

  // remove field
  collection.fields.removeById("relation2809058197")

  return app.save(collection)
})

================
File: server/pb_migrations/1742768667_updated_members.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update collection data
  unmarshal({
    "createRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "deleteRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "listRule": "org_id.id = @request.auth.org_id",
    "updateRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "viewRule": "org_id.id = @request.auth.org_id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update collection data
  unmarshal({
    "createRule": null,
    "deleteRule": null,
    "listRule": null,
    "updateRule": null,
    "viewRule": null
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769021_updated_users.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("_pb_users_auth_")

  // update field
  collection.fields.addAt(8, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation2657817989",
    "maxSelect": 999,
    "minSelect": 0,
    "name": "org_ids",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("_pb_users_auth_")

  // update field
  collection.fields.addAt(8, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation2657817989",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
})

================
File: server/pb_migrations/1742769102_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1",
    "deleteRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1",
    "listRule": "@request.auth.org_id.id ?= org_id.id",
    "updateRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1",
    "viewRule": "@request.auth.org_ids.id ?= org_id.id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update collection data
  unmarshal({
    "createRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 1",
    "deleteRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 1",
    "listRule": "org_id.id = @request.auth.org_id",
    "updateRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 1",
    "viewRule": "org_id.id = @request.auth.org_id"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769129_updated_member_preferences.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1512136413")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_id.id ?= org_id.id",
    "updateRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_id.id ?= org_id.id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1512136413")

  // update collection data
  unmarshal({
    "createRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "deleteRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "listRule": "org_id.id = @request.auth.org_id",
    "updateRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "viewRule": "org_id.id = @request.auth.org_id"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769143_updated_members.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_id.id ?= org_id.id",
    "updateRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_id.id ?= org_id.id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update collection data
  unmarshal({
    "createRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "deleteRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "listRule": "org_id.id = @request.auth.org_id",
    "updateRule": "org_id.id = @request.auth.org_id && @request.auth.permission_level > 2",
    "viewRule": "org_id.id = @request.auth.org_id"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769320_updated_roles.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_2105053228")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 1",
    "updateRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 1"
  }, collection)

  // add field
  collection.fields.addAt(6, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  // add field
  collection.fields.addAt(7, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_2105053228")

  // update collection data
  unmarshal({
    "createRule": null,
    "deleteRule": null,
    "listRule": null,
    "updateRule": null,
    "viewRule": null
  }, collection)

  // remove field
  collection.fields.removeById("relation4102257691")

  // remove field
  collection.fields.removeById("relation2809058197")

  return app.save(collection)
})

================
File: server/pb_migrations/1742769382_updated_organisations.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1053844701")

  // update collection data
  unmarshal({
    "createRule": "",
    "deleteRule": "@request.auth.org_id.id ?= id && @request.auth.permission_level > 3",
    "listRule": "@request.auth.org_id.id ?= id",
    "updateRule": "@request.auth.org_id.id ?= id && @request.auth.permission_level > 3",
    "viewRule": "@request.auth.org_id.id ?= id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1053844701")

  // update collection data
  unmarshal({
    "createRule": null,
    "deleteRule": null,
    "listRule": null,
    "updateRule": null,
    "viewRule": null
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769457_updated_members.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_ids.id ?= org_id.id",
    "updateRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_ids.id ?= org_id.id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_id.id ?= org_id.id",
    "updateRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_id.id ?= org_id.id"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769474_updated_member_preferences.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1512136413")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_ids.id ?= org_id.id",
    "updateRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_ids.id ?= org_id.id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1512136413")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_id.id ?= org_id.id",
    "updateRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_id.id ?= org_id.id"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769485_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update collection data
  unmarshal({
    "listRule": "@request.auth.org_ids.id ?= org_id.id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update collection data
  unmarshal({
    "listRule": "@request.auth.org_id.id ?= org_id.id"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769553_updated_assignees.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1995438148")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1",
    "deleteRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1",
    "listRule": "@request.auth.org_ids.id ?= org_id.id",
    "updateRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1",
    "viewRule": "@request.auth.org_ids.id ?= org_id.id"
  }, collection)

  // add field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  // add field
  collection.fields.addAt(5, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1995438148")

  // update collection data
  unmarshal({
    "createRule": null,
    "deleteRule": null,
    "listRule": null,
    "updateRule": null,
    "viewRule": null
  }, collection)

  // remove field
  collection.fields.removeById("relation4102257691")

  // remove field
  collection.fields.removeById("relation2809058197")

  return app.save(collection)
})

================
File: server/pb_migrations/1742769584_updated_organisations.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1053844701")

  // update collection data
  unmarshal({
    "deleteRule": "@request.auth.org_id.ids ?= id && @request.auth.permission_level > 3",
    "listRule": "@request.auth.org_ids.id ?= id",
    "updateRule": "@request.auth.org_ids.id ?= id && @request.auth.permission_level > 3",
    "viewRule": "@request.auth.org_ids.id ?= id"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1053844701")

  // update collection data
  unmarshal({
    "deleteRule": "@request.auth.org_id.id ?= id && @request.auth.permission_level > 3",
    "listRule": "@request.auth.org_id.id ?= id",
    "updateRule": "@request.auth.org_id.id ?= id && @request.auth.permission_level > 3",
    "viewRule": "@request.auth.org_id.id ?= id"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769598_updated_roles.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_2105053228")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1",
    "updateRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_ids.id ?= org_id.id && @request.auth.permission_level > 1"
  }, collection)

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_2105053228")

  // update collection data
  unmarshal({
    "createRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "deleteRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "listRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 1",
    "updateRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 2",
    "viewRule": "@request.auth.org_id.id ?= org_id.id && @request.auth.permission_level > 1"
  }, collection)

  return app.save(collection)
})

================
File: server/pb_migrations/1742769962_updated_organisations.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1053844701")

  // update field
  collection.fields.addAt(2, new Field({
    "cascadeDelete": true,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2117886457",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "owner_id",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1053844701")

  // update field
  collection.fields.addAt(2, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2117886457",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "owner_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
})

================
File: server/pb_migrations/1742769973_updated_members.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update field
  collection.fields.addAt(3, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  // update field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_3572739349")

  // update field
  collection.fields.addAt(3, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  // update field
  collection.fields.addAt(4, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
})

================
File: server/pb_migrations/1742772368_updated_events.js
================
/// <reference path="../pb_data/types.d.ts" />
migrate((app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(5, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  // update field
  collection.fields.addAt(6, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": true,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
}, (app) => {
  const collection = app.findCollectionByNameOrId("pbc_1687431684")

  // update field
  collection.fields.addAt(5, new Field({
    "cascadeDelete": false,
    "collectionId": "pbc_1053844701",
    "hidden": false,
    "id": "relation4102257691",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "org_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  // update field
  collection.fields.addAt(6, new Field({
    "cascadeDelete": false,
    "collectionId": "_pb_users_auth_",
    "hidden": false,
    "id": "relation2809058197",
    "maxSelect": 1,
    "minSelect": 0,
    "name": "user_id",
    "presentable": false,
    "required": false,
    "system": false,
    "type": "relation"
  }))

  return app.save(collection)
})

================
File: server/go.mod
================
module github.com/ohmsl/chat-app

go 1.23.4

require github.com/pocketbase/pocketbase v0.24.4

require (
	github.com/AlecAivazis/survey/v2 v2.3.7 // indirect
	github.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2 // indirect
	github.com/aws/aws-sdk-go-v2 v1.32.8 // indirect
	github.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 // indirect
	github.com/aws/aws-sdk-go-v2/config v1.28.10 // indirect
	github.com/aws/aws-sdk-go-v2/credentials v1.17.51 // indirect
	github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.23 // indirect
	github.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.48 // indirect
	github.com/aws/aws-sdk-go-v2/internal/configsources v1.3.27 // indirect
	github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.27 // indirect
	github.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 // indirect
	github.com/aws/aws-sdk-go-v2/internal/v4a v1.3.27 // indirect
	github.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 // indirect
	github.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.8 // indirect
	github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.8 // indirect
	github.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.8 // indirect
	github.com/aws/aws-sdk-go-v2/service/s3 v1.72.2 // indirect
	github.com/aws/aws-sdk-go-v2/service/sso v1.24.9 // indirect
	github.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.8 // indirect
	github.com/aws/aws-sdk-go-v2/service/sts v1.33.6 // indirect
	github.com/aws/smithy-go v1.22.1 // indirect
	github.com/disintegration/imaging v1.6.2 // indirect
	github.com/domodwyer/mailyak/v3 v3.6.2 // indirect
	github.com/dustin/go-humanize v1.0.1 // indirect
	github.com/fatih/color v1.18.0 // indirect
	github.com/gabriel-vasile/mimetype v1.4.8 // indirect
	github.com/ganigeorgiev/fexpr v0.4.1 // indirect
	github.com/go-ozzo/ozzo-validation/v4 v4.3.0 // indirect
	github.com/golang-jwt/jwt/v4 v4.5.1 // indirect
	github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 // indirect
	github.com/google/uuid v1.6.0 // indirect
	github.com/googleapis/gax-go/v2 v2.14.1 // indirect
	github.com/hashicorp/golang-lru/v2 v2.0.7 // indirect
	github.com/inconshreveable/mousetrap v1.1.0 // indirect
	github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 // indirect
	github.com/mattn/go-colorable v0.1.14 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d // indirect
	github.com/ncruces/go-strftime v0.1.9 // indirect
	github.com/pocketbase/dbx v1.11.0 // indirect
	github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect
	github.com/spf13/cast v1.7.1 // indirect
	github.com/spf13/cobra v1.8.1 // indirect
	github.com/spf13/pflag v1.0.5 // indirect
	go.opencensus.io v0.24.0 // indirect
	gocloud.dev v0.40.0 // indirect
	golang.org/x/crypto v0.32.0 // indirect
	golang.org/x/image v0.23.0 // indirect
	golang.org/x/net v0.34.0 // indirect
	golang.org/x/oauth2 v0.25.0 // indirect
	golang.org/x/sync v0.10.0 // indirect
	golang.org/x/sys v0.29.0 // indirect
	golang.org/x/term v0.28.0 // indirect
	golang.org/x/text v0.21.0 // indirect
	golang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da // indirect
	google.golang.org/api v0.216.0 // indirect
	google.golang.org/genproto/googleapis/rpc v0.0.0-20250106144421-5f5ef82da422 // indirect
	google.golang.org/grpc v1.69.2 // indirect
	google.golang.org/protobuf v1.36.2 // indirect
	modernc.org/gc/v3 v3.0.0-20250105121824-520be1a3aee6 // indirect
	modernc.org/libc v1.55.3 // indirect
	modernc.org/mathutil v1.7.1 // indirect
	modernc.org/memory v1.8.1 // indirect
	modernc.org/sqlite v1.34.4 // indirect
	modernc.org/strutil v1.2.1 // indirect
	modernc.org/token v1.1.0 // indirect
)

================
File: src/components/ActionMenu.tsx
================
import {
	IconButton,
	type IconButtonProps,
	ListItemIcon,
	Menu,
	MenuItem,
	type MenuItemProps,
	type MenuProps,
} from "@mui/material";
import { MoreVertical } from "lucide-react";
import { useState } from "react";

export type MenuAction = {
	label: string;
	icon?: React.ReactNode;
	onClick?: () => void;
	menuItemProps?: MenuItemProps;
	disabled?: boolean;
};

type Props = {
	actions: Array<MenuAction>;
	slotProps?: {
		iconButton?: IconButtonProps;
		menu?: MenuProps;
		menuItem?: MenuItemProps;
	};
	children?: React.ReactNode;
};

export const ActionMenu: React.FC<Props> = ({
	actions,
	slotProps = {},
	children,
}) => {
	const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);

	const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
		setAnchorEl(event.currentTarget);
	};

	const handleClose = () => {
		setAnchorEl(null);
	};

	return (
		<>
			<IconButton onClick={handleClick} {...slotProps.iconButton}>
				{children ? children : <MoreVertical />}
			</IconButton>
			<Menu
				anchorEl={anchorEl}
				open={Boolean(anchorEl)}
				onClose={handleClose}
				{...slotProps.menu}
			>
				{actions.map((action) => (
					<MenuItem
						key={action.label}
						onClick={action.onClick}
						disabled={action.disabled}
						{...slotProps.menuItem}
						{...action.menuItemProps}
					>
						{action.icon && (
							<ListItemIcon sx={{ color: "inherit" }}>
								{action.icon}
							</ListItemIcon>
						)}
						{action.label}
					</MenuItem>
				))}
			</Menu>
		</>
	);
};

================
File: src/components/CheckButton.tsx
================
import {
    alpha,
    ButtonBase,
    Checkbox,
    lighten,
    Paper,
    SxProps,
    touchRippleClasses,
    Typography,
    useTheme,
} from "@mui/material";

type Props = {
    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    selected?: boolean;
    color?: "primary" | "secondary" | "success" | "error" | "info" | "warning";
    sx?: SxProps;
    children?: React.ReactNode;
};

export const CheckButton: React.FC<Props> = ({
    onClick,
    selected = false,
    color = "primary",
    sx,
    children,
}) => {
    const theme = useTheme();

    const borderColor = selected
        ? alpha(theme.palette[color].light, 0.5)
        : theme.palette.divider;

    const backgroundColor = selected
        ? alpha(theme.palette[color].main, 0.15)
        : lighten(theme.palette.background.paper, 0.05);

    return (
        <Paper
            onClick={onClick}
            component={ButtonBase}
            variant="outlined"
            sx={{
                display: "flex",
                alignItems: "center",
                justifyContent: "flex-start",
                border: `1px solid ${borderColor}`,
                backgroundColor,
                color: selected
                    ? theme.palette[color].dark
                    : theme.palette.grey[700],
                pr: "10px",
                ...theme.applyStyles("dark", {
                    color: theme.palette[color].contrastText,
                }),
                [`& .${touchRippleClasses.child}`]: {
                    bgcolor: selected
                        ? theme.palette[color].light
                        : theme.palette.neutral.dark,
                    color: selected
                        ? theme.palette[color].dark
                        : theme.palette.grey[50],
                },
                ...sx,
            }}
        >
            <Checkbox checked={selected} color={color} disableRipple />
            <Typography fontWeight={500} my={0.5} textAlign="left">
                {children}
            </Typography>
        </Paper>
    );
};

================
File: src/components/ConfirmDialog.tsx
================
import {
    Button,
    ButtonProps,
    Dialog,
    DialogActions,
    DialogContent,
    DialogContentText,
    DialogTitle,
} from "@mui/material";

type ConfirmDialogProps = {
    title: string;
    message: string;
    onClose: () => void;
    onConfirm: () => void;
    confirmButton?: {
        text?: string;
        color?: ButtonProps["color"];
        variant?: ButtonProps["variant"];
    };
    cancelButton?: {
        text?: string;
        color?: ButtonProps["color"];
        variant?: ButtonProps["variant"];
    };
};

export const ConfirmDialog = ({
    title,
    message,
    onClose,
    onConfirm,
    confirmButton = { text: "Confirm", color: "info", variant: "text" },
    cancelButton = { text: "Cancel", color: "info", variant: "text" },
}: ConfirmDialogProps) => {
    return (
        <Dialog open onClose={onClose}>
            <DialogTitle>{title}</DialogTitle>
            <DialogContent>
                <DialogContentText>{message}</DialogContentText>
            </DialogContent>
            <DialogActions>
                <Button
                    onClick={onClose}
                    color={cancelButton.color}
                    variant={cancelButton.variant}
                >
                    {cancelButton.text}
                </Button>
                <Button
                    onClick={onConfirm}
                    color={confirmButton.color}
                    variant={confirmButton.variant}
                >
                    {confirmButton.text}
                </Button>
            </DialogActions>
        </Dialog>
    );
};

================
File: src/components/Loader.tsx
================
import { keyframes, styled } from '@mui/material/styles';

const travel = keyframes`
  0% {
    stroke-dashoffset: 0;
  }
  100% {
    stroke-dashoffset: -100;
  }
`;

const SvgContainer = styled('svg')(({ theme }) => ({
    '--uib-size': '37px',
    '--uib-color': theme.palette.text.primary,
    '--uib-speed': '0.9s',
    '--uib-bg-opacity': '0.1',
    height: 'var(--uib-size)',
    width: 'var(--uib-size)',
    transformOrigin: 'center',
    overflow: 'visible',
}));

const Track = styled('path')(() => ({
    stroke: 'var(--uib-color)',
    opacity: 'var(--uib-bg-opacity)',
    fill: 'none',
    strokeWidth: 5,
    transition: 'stroke 0.5s ease',
}));

const Car = styled('path')(() => ({
    fill: 'none',
    stroke: 'var(--uib-color)',
    strokeWidth: 5,
    strokeDasharray: '15, 85',
    strokeDashoffset: 0,
    strokeLinecap: 'round',
    animation: `${travel} var(--uib-speed) linear infinite`,
    willChange: 'stroke-dasharray, stroke-dashoffset',
    transition: 'stroke 0.5s ease',
}));

export const Loader = () => (
    <SvgContainer viewBox="0 0 37 37" height="37" width="37" preserveAspectRatio="xMidYMid meet">
        <Track
            pathLength={100}
            d="M0.37 18.5 C0.37 5.772 5.772 0.37 18.5 0.37 S36.63 5.772 36.63 18.5 S31.228 36.63 18.5 36.63 S0.37 31.228 0.37 18.5"
        />
        <Car
            pathLength={100}
            d="M0.37 18.5 C0.37 5.772 5.772 0.37 18.5 0.37 S36.63 5.772 36.63 18.5 S31.228 36.63 18.5 36.63 S0.37 31.228 0.37 18.5"
        />
    </SvgContainer>
);

================
File: src/components/Navbar.tsx
================
import { AppBar, Button, Stack, Toolbar, Typography } from '@mui/material';
import { BarChart2Icon, CalendarHeartIcon, CalendarIcon, SettingsIcon, ShapesIcon, UsersIcon } from 'lucide-react';
import { useLocation, useNavigate } from 'react-router';

const config = [





];

export const Navbar = () => {
    const location = useLocation();
    const navigate = useNavigate();

    return (
        <AppBar position="static">
            <Toolbar
                sx={{
                    width: '100%',
                    maxWidth: 'lg',
                    mx: 'auto',
                    gap: 1,
                }}
            >
                <CalendarHeartIcon strokeWidth={2.25} />
                <Typography variant="h6" fontWeight="bold" sx={{ flexGrow: 1 }}>
                    Quibble
                </Typography>
                <Stack direction="row" spacing={2} alignItems="center">
                    {config.map(item => (
                        <Button
                            key={item.label}
                            startIcon={item.icon}
                            color="inherit"
                            onClick={() => navigate(item.path, { viewTransition: true })}
                            sx={{
                                color: location.pathname === item.path ? 'info.main' : 'text.primary',
                            }}
                        >
                            {item.label}
                        </Button>
                    ))}
                </Stack>
            </Toolbar>
        </AppBar>
    );
};

================
File: src/components/StatusIndicator.tsx
================
import { Badge, IconButton, styled } from '@mui/material';
import { XIcon } from 'lucide-react';
import { useEffect } from 'react';
import { toast } from 'sonner';
import { useAppState } from '../modules/state/useAppState';

const StyledBadge = styled(Badge)(({ theme }) => ({
    position: 'fixed',
    top: 8,
    right: 8,
    '@keyframes pulse': {
        '0%': {
            boxShadow: '0 0 0 0 rgba(76, 175, 80, 0.7)',
        },
        '70%': {
            boxShadow: '0 0 0 10px rgba(76, 175, 80, 0)',
        },
        '100%': {
            boxShadow: '0 0 0 0 rgba(76, 175, 80, 0)',
        },
    },
    '&.pulsing .MuiBadge-dot': {
        animation: 'pulse 2s infinite',
    },
    zIndex: theme.zIndex.modal + 1,
}));

export const StatusIndicator = () => {
    const status = useAppState.use.connectionStatus();
    const loading = useAppState.use.loading();

    useEffect(() => {
        toast.dismiss();

        switch (status) {
            case 'unavailable':
                toast.warning('Server Unavailable', {
                    description: "You're online, but our servers aren't responding.",
                    duration: Infinity,
                    action: (
                        <IconButton onClick={() => toast.dismiss()} color="inherit" size="small">
                            <XIcon />
                        </IconButton>
                    ),
                });
                break;
            case 'offline':
                toast.error('Connection Lost', { description: "You're offline. Some features may not work.", duration: Infinity });
                break;
            case 'online':
                toast.success('Back Online', { description: "Connection restored. You're good to go!" });
                break;
        }
    }, [status]);

    const getColor = () => {
        switch (status) {
            case 'online':
                return 'success';
            case 'offline':
                return 'error';
            case 'unavailable':
                return 'warning';
            default:
                return 'default';
        }
    };

    return <StyledBadge variant="dot" color={getColor()} className={loading ? 'pulsing' : ''} />;
};

================
File: src/hooks/useAuth.ts
================
import { useState } from "react";
import { useNavigate } from "react-router";
import { usePbStore } from "../modules/state/pocketbase/usePbStore";
import { LoginParams } from "../types/auth/LoginParams";

export const useAuth = () => {
    const navigate = useNavigate();

    const [error, setError] = useState<string | null>(null);
    const {
        isAuthenticated,
        user,
        token,
        isLoading,
        registerUser,
        registerOrganisation,
        login,
        logout,
        refreshAuthState,
    } = usePbStore();

    const handleRegister = async (data: {
        firstName: string;
        lastName: string;
        email: string;
        password: string;
    }) => {
        try {
            await registerUser(data);
            navigate("/schedule");
        } catch (error) {
            if (error instanceof Error) {
                setError(error.message);
            } else {
                setError("An unknown error occurred");
            }
            console.error("Registration error:", error);
        }
    };

    const handleLogin = async (params: LoginParams) => {
        try {
            await login(params);
            navigate("/schedule");
        } catch (error) {
            if (error instanceof Error) {
                setError(error.message);
            } else {
                setError("An unknown error occurred");
            }
            console.error("Login error:", error);
        }
    };

    const handleRegisterOrganisation = async (name: string) => {
        try {
            await registerOrganisation(name);
        } catch (error) {
            if (error instanceof Error) {
                setError(error.message);
            } else {
                setError("An unknown error occurred");
            }
            console.error("Org registration error:", error);
        }
    };

    const handleLogout = () => {
        logout();
        navigate("/login");
    };

    return {
        isAuthenticated,
        user,
        token,
        isLoading,
        error,
        register: handleRegister,
        registerOrganisation: handleRegisterOrganisation,
        login: handleLogin,
        logout: handleLogout,
        refreshAuthState,
    };
};

================
File: src/layouts/AnimatedOutlet.tsx
================
import { AnimatePresence, motion } from 'motion/react';
import { cloneElement } from 'react';
import { useLocation, useOutlet } from 'react-router';

export const AnimatedOutlet = () => {
    const location = useLocation();
    const element = useOutlet();

    return (
        <AnimatePresence mode="wait" initial>
            <motion.div key={location.pathname} initial="initial" animate="animate" exit="exit">
                {element && cloneElement(element, { key: location.pathname })}
            </motion.div>
        </AnimatePresence>
    );
};

================
File: src/layouts/AuthLayout.tsx
================
import { Box } from '@mui/material';
import { Outlet } from 'react-router';

export const AuthLayout = () => {
    return (
        <Box sx={{ display: 'grid', placeItems: 'center', height: '100vh', p: 4, overflow: 'auto' }}>
            <Outlet />
        </Box>
    );
};

================
File: src/layouts/Layout.tsx
================
import { useTheme } from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';
import { useEffect } from 'react';
import { scan } from 'react-scan';
import { Toaster } from 'sonner';
import { StatusIndicator } from '../components/StatusIndicator';
import { DialogProvider } from '../providers/DialogProvider';
import { AnimatedOutlet } from './AnimatedOutlet';

export const Layout = () => {
    const theme = useTheme();

    useEffect(() => {
        scan({ enabled: false, trackUnnecessaryRenders: true });
    }, []);

    return (
        <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DialogProvider>
                <AnimatedOutlet />
                <StatusIndicator />
                <Toaster theme={theme.palette.mode} richColors />
            </DialogProvider>
        </LocalizationProvider>
    );
};

================
File: src/layouts/PageLayout.tsx
================
import { Container } from '@mui/material';
import { Outlet } from 'react-router';
import { Navbar } from '../components/Navbar';

export const PageLayout = () => {
    return (
        <>
            <Navbar />
            <Container sx={{ my: 3 }} maxWidth="lg">
                <Outlet />
            </Container>
        </>
    );
};

================
File: src/modules/auth/getLatestUserRecord.ts
================
import pb from "../pocketbase/pb";

export const getLatestUserRecord = async () => {
    const userId = pb.authStore.record?.id;
    if (!userId) throw new Error("No authenticated user");

    const user = await pb.collection("users").getOne(userId);
    return user;
};

================
File: src/modules/auth/getUser.ts
================
import { usePbStore } from "../state/pocketbase/usePbStore";

export const getUser = () => {
    const user = usePbStore.getState().user;
    return user;
};

================
File: src/modules/initialisation/routines/hijackFetch.ts
================
import { logger } from '../../../utils/logger';
import { useAppState } from '../../state/useAppState';

export const hijackFetch = (): (() => void) => {
    const set = useAppState.setState;
    const originalFetch: typeof fetch = window.fetch.bind(window);

    let activeRequests = 0;
    let loadingDebounceTimer: ReturnType<typeof setTimeout> | null = null;

    const startHttpRequest = (): void => {
        activeRequests += 1;
        set({ loading: true });
    };

    const finishHttpRequest = (): void => {
        activeRequests = Math.max(0, activeRequests - 1);
        if (activeRequests === 0) {
            if (loadingDebounceTimer !== null) {
                clearTimeout(loadingDebounceTimer);
            }

            loadingDebounceTimer = setTimeout(() => {
                set({ loading: false });
                loadingDebounceTimer = null;
            }, 1000);
        }
    };

    const hijackedFetch = async (input: string | URL | Request, init?: RequestInit): Promise<Response> => {
        startHttpRequest();
        try {
            const response: Response = await originalFetch(input, init);
            return response;
        } catch (error: unknown) {
            // biome-ignore lint: Preserve stack trace.
            throw error;
        } finally {
            finishHttpRequest();
        }
    };

    // Replace the global fetch with the hijacked version
    window.fetch = hijackedFetch;

    /**
     * Restores the original fetch function and clears internal state.
     */
    const restore = (): void => {
        window.fetch = originalFetch;
        if (loadingDebounceTimer !== null) {
            clearTimeout(loadingDebounceTimer);
            loadingDebounceTimer = null;
        }
        activeRequests = 0;
        set({ loading: false });
        logger.info('Fetch hijack restored');
    };

    return restore;
};

================
File: src/modules/initialisation/routines/subscribeToConnectionStatus.ts
================
import pb from '../../pocketbase/pb';
import { useAppState } from '../../state/useAppState';

export const subscribeToConnectionStatus = () => {
    const get = useAppState.getState;
    const set = useAppState.setState;

    // Handler to update connection status based on browser online/offline events.
    const handleNetworkChange = (): void => {
        const online = navigator.onLine;

        set({ connectionStatus: online ? 'online' : 'offline' });
    };

    window.addEventListener('online', handleNetworkChange);
    window.addEventListener('offline', handleNetworkChange);

    const interval = setInterval(async () => {
        try {
            if (get().connectionStatus === 'offline') return;

            const response = await pb.health.check();

            if (response.code === 200) {
                set({ connectionStatus: 'online' });
            } else {
                set({ connectionStatus: 'unavailable' });
            }
        } catch {
            set({ connectionStatus: 'unavailable' });
        }
    }, 10000);

    set({ connectionStatus: navigator.onLine ? 'online' : 'offline' });

    // Return unsubscribe function to remove event listeners.
    return (): void => {
        window.removeEventListener('online', handleNetworkChange);
        window.removeEventListener('offline', handleNetworkChange);
        clearInterval(interval);
    };
};

================
File: src/modules/initialisation/asyncInit.ts
================
import { NavigateFunction } from 'react-router';
import { logger } from '../../utils/logger';
import { getUser } from '../auth/getUser';
import pb from '../pocketbase/pb';
import { useAppState } from '../state/useAppState';

/**
 * Function to initialise agnostic services or state
 */
export const asyncInit = async (startTime: number, navigate: NavigateFunction) => {
    try {
        await pb.collection('users').authRefresh();
    } catch (error) {
        logger.warn(error);
        pb.authStore.clear();
    }

    const { fetchEvents, fetchRoles, fetchMembers, fetchPreferences } = useAppState.getState();

    const user = getUser();

    if (user) {
        await Promise.allSettled([fetchEvents(), fetchRoles(), fetchMembers(), fetchPreferences()]);

        useAppState.setState({ orgId: user.org_ids?.[0] });
    }

    // ===============
    //  Route Decider
    // ===============
    let targetRoute = '/';

    const loggedIn = !!user;
    const hasOrg = (user?.org_ids || []).length > 0;

    console.log('logged in:', loggedIn);
    console.log('has org:', hasOrg);

    if (!loggedIn) targetRoute = '/login';
    else if (loggedIn && !hasOrg) targetRoute = '/register/organisation';
    else targetRoute = '/schedule';

    if (location.pathname.length === 1 || !loggedIn || (loggedIn && location.pathname.includes('login'))) {
        navigate(targetRoute, { replace: true });
    }

    useAppState.setState({ initialised: true });
    logger.info(`Initialisation completed in ${Date.now() - startTime}ms`);
};

================
File: src/modules/initialisation/Initialiser.tsx
================
import { useEffect } from 'react';
import { useNavigate } from 'react-router';
import { createScopedLogger } from '../../utils/logger';
import { asyncInit } from './asyncInit';
import { hijackFetch } from './routines/hijackFetch';
import { subscribeToConnectionStatus } from './routines/subscribeToConnectionStatus';

export const Initialiser = () => {
    const navigate = useNavigate();

    useEffect(() => {
        const startTime = Date.now();
        const logger = createScopedLogger('init');

        logger.info('Initialising application...');

        const restoreFetch = hijackFetch();
        const unsubscribeConnectionStatus = subscribeToConnectionStatus();

        asyncInit(startTime, navigate);

        return () => {
            restoreFetch();
            unsubscribeConnectionStatus();
        };
    }, []);

    return null;
};

================
File: src/modules/initialisation/LoaderGate.tsx
================
import { Box } from '@mui/material';
import { AnimatePresence, motion } from 'motion/react';
import { Loader } from '../../components/Loader';
import { useAppState } from '../state/useAppState';
import { Initialiser } from './Initialiser';

export const LoaderGate: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const initialised = useAppState().initialised;

    return (
        <>
            <Initialiser />
            <AnimatePresence mode="wait">
                {!initialised && (
                    <Box
                        sx={{
                            position: 'fixed',
                            inset: 0,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            bgcolor: 'background.default',
                        }}
                        component={motion.div}
                        key="loader"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.2, ease: 'easeInOut' }}
                    >
                        <Loader />
                    </Box>
                )}
            </AnimatePresence>
            {initialised && children}
        </>
    );
};

================
File: src/modules/members/MembersList.tsx
================
import { List, ListItem, ListItemText, Paper, Stack } from '@mui/material';
import { useAppState } from '../state/useAppState';

export const MembersList = () => {
    const members = useAppState.use.members();

    return (
        <List component={Stack} spacing={1}>
            {members.map(member => {
                return (
                    <ListItem key={member.name} component={Paper} variant="outlined" sx={{ minHeight: 76, pr: 7 }}>
                        <ListItemText primary={member.name} secondary={`Joined: ${member.created}`} />
                    </ListItem>
                );
            })}
        </List>
    );
};

================
File: src/modules/pocketbase/pb.ts
================
import PocketBase from 'pocketbase';
import { TypedPocketBase } from '../../types/pb_types';

const pb = new PocketBase('http://localhost:8090') as TypedPocketBase;

(window as any).pb = pb;

export default pb;

================
File: src/modules/roles/IconPicker.tsx
================
import {
    Box,
    IconButton,
    InputAdornment,
    Stack,
    TextField,
    Tooltip,
} from "@mui/material";
import Fuse from "fuse.js";
import { SearchIcon, XIcon } from "lucide-react";
import { useMemo, useState } from "react";
import { AutoSizer, List } from "react-virtualized";
import { roleIconMap } from "./roleIcons";

const ICON_SIZE = 48;

type Props = {
    icons: Array<{ name: string; Icon: React.FC }>;
    onChange: (icon: keyof typeof roleIconMap) => void;
    value?: keyof typeof roleIconMap;
};

export const IconPicker = ({ icons, onChange, value }: Props) => {
    const fuse = useMemo(
        () =>
            new Fuse(icons, {
                keys: ["name"],
                threshold: 0.3,
                distance: 100,
            }),
        [icons],
    );

    const [searchTerm, setSearchTerm] = useState("");

    const filteredIcons = useMemo(() => {
        if (!searchTerm) return icons;
        return fuse.search(searchTerm).map((result) => result.item);
    }, [searchTerm]);

    return (
        <Stack flex={1} minHeight={200}>
            <TextField
                placeholder="Search icons..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                sx={{ mb: 1 }}
                slotProps={{
                    input: {
                        endAdornment: (
                            <InputAdornment position="end">
                                {searchTerm.length > 0 ? (
                                    <IconButton
                                        onClick={() => setSearchTerm("")}

                        ),
                    },
                }}
                size="small"
                fullWidth
            />

            <Box flex={1}>
                <AutoSizer>
                    {({ width, height }) => {
                        // Calculate how many icons fit per row
                        const iconsPerRow = Math.max(
                            1,
                            Math.floor(width / ICON_SIZE),
                        );

                        // Calculate rows needed
                        const rowCount = Math.ceil(
                            filteredIcons.length / iconsPerRow,
                        );

                        const rowRenderer = ({
                            index,
                            key,
                            style,
                        }: {
                            index: number;
                            key: string;
                            style: React.CSSProperties;
                        }) => {
                            const startIndex = index * iconsPerRow;
                            const endIndex = Math.min(
                                startIndex + iconsPerRow,
                                filteredIcons.length,
                            );
                            const rowIcons = filteredIcons.slice(
                                startIndex,
                                endIndex,
                            );

                            // Calculate space distribution for this row
                            // If the row is full, we use the standard size
                            // If the row isn't full, we adjust spacing to maintain the layout
                            const actualIconsInRow = rowIcons.length;

                            return (
                                <div
                                    key={key}
                                    style={{
                                        ...style,
                                        display: "flex",
                                        justifyContent:
                                            actualIconsInRow < iconsPerRow
                                                ? "flex-start"
                                                : "space-around",
                                    }}
                                >
                                    {rowIcons.map(({ name, Icon }, i) => (
                                        <Box
                                            key={i}
                                            sx={{
                                                width:
                                                    actualIconsInRow <
                                                    iconsPerRow
                                                        ? ICON_SIZE
                                                        : width / iconsPerRow,
                                                display: "flex",
                                                justifyContent: "center",
                                                color: "text.primary",
                                            }}
                                        >
                                            <Tooltip
                                                title={name
                                                    .replace(/([A-Z])/g, " $1")
                                                    .trim()}
                                            >
                                                <IconButton
                                                    color={
                                                        value === name
                                                            ? "primary"
                                                            : "inherit"
                                                    }
                                                    onClick={() => {
                                                        onChange(name);
                                                    }}
                                                >
                                                    <Icon size={32} />
                                                </IconButton>
                                            </Tooltip>
                                        </Box>
                                    ))}
                                </div>
                            );
                        };

                        return (
                            <List
                                rowRenderer={rowRenderer}
                                rowCount={rowCount}
                                rowHeight={ICON_SIZE}
                                height={height}
                                width={width}
                                overscanRowCount={5}
                            />
                        );
                    }}
                </AutoSizer>
            </Box>
        </Stack>
    );
};

================
File: src/modules/roles/RoleForm.tsx
================
import { zodResolver } from '@hookform/resolvers/zod';
import { Button, DialogActions, DialogContent, DialogTitle, Stack, TextField, Typography } from '@mui/material';
import { Controller, useForm } from 'react-hook-form';
import * as z from 'zod';
import { IconPicker } from './IconPicker';
import { roleIconMap } from './roleIcons';

const icons = Object.entries(roleIconMap).map(([name, Icon]) => ({
    name: name as keyof typeof roleIconMap,
    Icon,
}));

const schema = z.object({
    id: z.string().default('').readonly(),
    name: z.string().min(3, 'Name must be at least 3 characters long'),
    description: z.string().optional(),
    icon: z.custom<keyof typeof roleIconMap>(),
    minAssignments: z.number().min(0, 'Minimum assignments must be at least 0'),
    maxAssignments: z.number().min(1, 'Maximum assignments must be at least 1'),
});

export type RoleFormValues = z.infer<typeof schema>;

type Props = {
    defaultValues?: Partial<RoleFormValues>;
    onSubmit: (data: RoleFormValues) => void;
    onClose: () => void;
};

export const RoleForm: React.FC<Props> = ({ defaultValues, onSubmit, onClose }) => {
    const {
        control,
        handleSubmit,
        formState: { errors, isValid },
    } = useForm<RoleFormValues>({
        resolver: zodResolver(schema),
        mode: 'onChange',
        defaultValues,
    });

    return (
        <Stack component="form" onSubmit={handleSubmit(onSubmit)} sx={{ height: '100%' }}>
            <DialogTitle>{defaultValues ? 'Edit' : 'Create'} Role</DialogTitle>

            <DialogContent
                sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    flexGrow: 1,
                    overflowY: 'visible',
                    gap: 2,
                }}
            >
                <Controller
                    name="name"
                    control={control}
                    defaultValue=""
                    render={({ field }) => (
                        <TextField {...field} label="Title" error={!!errors.name} helperText={errors.name?.message} fullWidth />
                    )}
                />

                <Controller
                    name="description"
                    control={control}
                    defaultValue=""
                    render={({ field }) => (
                        <TextField
                            {...field}
                            label="Description"
                            error={!!errors.description}
                            helperText={errors.description?.message}
                            minRows={3}
                            multiline
                            fullWidth
                        />
                    )}
                />

                <Stack direction="row" spacing={2}>
                    <Controller
                        name="minAssignments"
                        control={control}
                        defaultValue={0}
                        render={({ field: { onChange, ...field } }) => (
                            <TextField
                                {...field}
                                onChange={e => onChange(Number(e.target.value))}
                                label="Minimum Assignments"
                                error={!!errors.minAssignments}
                                helperText={errors.minAssignments?.message}
                                type="number"
                                fullWidth
                            />
                        )}
                    />

                    <Controller
                        name="maxAssignments"
                        control={control}
                        defaultValue={1}
                        render={({ field: { onChange, ...field } }) => (
                            <TextField
                                {...field}
                                onChange={e => {
                                    onChange(Number(e.target.value));
                                }}
                                label="Maximum Assignments"
                                error={!!errors.maxAssignments}
                                helperText={errors.maxAssignments?.message}
                                type="number"
                                fullWidth
                            />
                        )}
                    />
                </Stack>

                <Controller
                    name="icon"
                    control={control}
                    render={({ field: { onChange, value } }) => {
                        const onSelectIcon = (icon: keyof typeof roleIconMap) => {
                            onChange(icon);
                        };

                        return (
                            <Stack flex={1}>
                                <Typography variant="h6" gutterBottom>
                                    Select an Icon
                                </Typography>
                                <IconPicker icons={icons} onChange={onSelectIcon} value={value} />
                                {errors.icon?.message && (
                                    <Typography variant="body2" color="error">
                                        {errors.icon?.message}
                                    </Typography>
                                )}
                            </Stack>
                        );
                    }}
                />
            </DialogContent>

            <DialogActions>
                <Button variant="outlined" color="neutral" onClick={onClose}>
                    Cancel
                </Button>
                <Button variant="contained" color="primary" type="submit" disabled={!isValid}>
                    Save
                </Button>
            </DialogActions>
        </Stack>
    );
};

================
File: src/modules/roles/roleIcons.ts
================
import {
    AlarmClock,
    AlarmClockCheck,
    Armchair,
    AudioLines,
    AudioWaveform,
    Bell,
    Book,
    BookOpen,
    CalendarCheck,
    CalendarDays,
    CalendarPlus,
    CalendarRange,
    CalendarX,
    Camera,
    ClipboardCheck,
    ClipboardList,
    ClipboardPen,
    ClipboardPlus,
    ClipboardX,
    DoorClosed,
    DoorOpen,
    Flag,
    Hand,
    Handshake,
    Headphones,
    Laptop,
    Lectern,
    Megaphone,
    Mic,
    MicOff,
    Monitor,
    MonitorSpeaker,
    Notebook,
    Pen,
    Presentation,
    Projector,
    ScreenShare,
    Share,
    Speaker,
    Timer,
    Tv,
    User,
    UserCheck,
    UserCog,
    UserPlus,
    UserSearch,
    Users,
    UsersRound,
    Video,
    Webcam,
} from "lucide-react";

export const roleIconMap = {
    Mic: Mic,
    MicOff: MicOff,
    Speaker: Speaker,
    Headphones: Headphones,
    AudioLines: AudioLines,
    AudioWaveform: AudioWaveform,
    Monitor: Monitor,
    MonitorSpeaker: MonitorSpeaker,
    Camera: Camera,
    Video: Video,
    Webcam: Webcam,
    ScreenShare: ScreenShare,
    Laptop: Laptop,
    Tv: Tv,
    Projector: Projector,
    User: User,
    UserCheck: UserCheck,
    UserPlus: UserPlus,
    UserCog: UserCog,
    UserSearch: UserSearch,
    Users: Users,
    UsersRound: UsersRound,
    Handshake: Handshake,
    DoorOpen: DoorOpen,
    DoorClosed: DoorClosed,
    Book: Book,
    BookOpen: BookOpen,
    Lectern: Lectern,
    Timer: Timer,
    AlarmClock: AlarmClock,
    AlarmClockCheck: AlarmClockCheck,
    ClipboardCheck: ClipboardCheck,
    ClipboardList: ClipboardList,
    ClipboardPen: ClipboardPen,
    ClipboardPlus: ClipboardPlus,
    ClipboardX: ClipboardX,
    CalendarDays: CalendarDays,
    CalendarCheck: CalendarCheck,
    CalendarPlus: CalendarPlus,
    CalendarRange: CalendarRange,
    CalendarX: CalendarX,
    Share: Share,
    Presentation: Presentation,
    Megaphone: Megaphone,
    Armchair: Armchair,
    Flag: Flag,
    Notebook: Notebook,
    Pen: Pen,
    Bell: Bell,
    Hand: Hand,
} as const;

================
File: src/modules/roles/RolesList.tsx
================
import {
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Paper,
    Stack,
} from "@mui/material";
import { CircleHelpIcon, EditIcon, Trash2Icon } from "lucide-react";
import { ActionMenu } from "../../components/ActionMenu";
import { ConfirmDialog } from "../../components/ConfirmDialog";
import { useDialog } from "../../providers/DialogProvider";
import type { Role } from "../../types/Role";
import { useAppState } from "../state/useAppState";
import { RoleForm } from "./RoleForm";
import { roleIconMap } from "./roleIcons";

type Props = {
    roles: Array<Role>;
};

export const RolesList: React.FC<Props> = ({ roles }) => {
    const { showDialog, closeDialog } = useDialog();
    const addRole = useAppState.use.addRole();
    const updateRole = useAppState.use.updateRole();
    const removeRole = useAppState.use.removeRole();

    const handleSaveRole = (role: Role) => {
        if (!role.id) addRole(role);
        else updateRole(role.id, role);

        closeDialog();
    };

    const handleEdit = (role: Role) => {
        showDialog(
            <RoleForm
                defaultValues={role}
                onClose={closeDialog}
                onSubmit={handleSaveRole}
            />,
        );
    };

    const handleRemove = (role: Role) => {
        showDialog(
            <ConfirmDialog
                title="Remove Role"
                message={`Are you sure you want to remove the role "${role.name}"?`}
                onClose={closeDialog}
                onConfirm={() => {
                    removeRole(role.id);
                    closeDialog();
                }}
                confirmButton={{ text: "Remove", color: "error" }}
                cancelButton={{ text: "Cancel", color: "info" }}
            />,
        );
    };

    return (
        <List component={Stack} spacing={1}>
            {roles.map((role) => {
                const Icon = roleIconMap[role.icon];

                return (
                    <ListItem
                        key={role.name}
                        component={Paper}
                        variant="outlined"
                        secondaryAction={
                            <ActionMenu
                                actions={[


                                            sx: { color: "error.main" },
                                        },
                                        onClick: () => handleRemove(role),
                                    },
                                ]}
                            />
                        }
                        sx={{ minHeight: 76, pr: 7 }}
                    >
                        <ListItemIcon>
                            {Icon ? <Icon /> : <CircleHelpIcon />}
                        </ListItemIcon>
                        <ListItemText
                            primary={role.name}
                            secondary={role.description}
                            slotProps={{
                                secondary: {
                                    sx: {
                                        textWrap: "nowrap",
                                        overflow: "hidden",
                                        textOverflow: "ellipsis",
                                    },
                                },
                            }}
                        />
                    </ListItem>
                );
            })}
        </List>
    );
};

================
File: src/modules/roles/RolesToolbar.tsx
================
import { Button, InputAdornment, TextField, Toolbar } from '@mui/material';
import { PlusIcon, SearchIcon } from 'lucide-react';
import { useDialog } from '../../providers/DialogProvider';
import { useAppState } from '../state/useAppState';
import { RoleForm, RoleFormValues } from './RoleForm';

export const RolesToolbar = () => {
    const { showDialog, closeDialog } = useDialog();

    const addRole = useAppState.use.addRole();

    const handleSubmit = (data: RoleFormValues) => {
        addRole(data);
        closeDialog();
    };

    const handleCreateRole = () => {
        showDialog(<RoleForm onClose={closeDialog} onSubmit={handleSubmit} />, {
            slotProps: { paper: { sx: { height: '100%' } } },
            fullWidth: true,
        });
    };

    return (
        <Toolbar disableGutters sx={{ justifyContent: 'space-between' }}>
            <TextField
                label="Search"
                variant="outlined"
                size="small"
                slotProps={{
                    input: {

                    },
                }}

        </Toolbar>
    );
};

================
File: src/modules/scheduler/MonthlyView/CalendarDay.tsx
================
import {
    ButtonBase,
    Grid2 as Grid,
    Stack,
    type SxProps,
    Typography,
    alpha,
    touchRippleClasses,
    useTheme,
} from "@mui/material";
import { format, isToday as isDateToday } from "date-fns";
import { useState } from "react";
import { EventsRecord } from "../../../types/pb_types";
import { EventPopover } from "./EventPopover";

type Props = {
    day: Date;
    events: Array<EventsRecord>;
    disabled?: boolean;
};

export const CalendarDay = ({ day, events, disabled }: Props) => {
    const [selectedEvent, setSelectedEvent] = useState<EventsRecord | null>(
        null,
    );
    const [eventPopoverAnchorEl, setEventPopoverAnchorEl] =
        useState<HTMLElement | null>(null);

    const theme = useTheme();

    const formattedDate = format(day, "d");
    const isToday = isDateToday(day);

    const todayStyle: SxProps = {
        display: "grid",
        placeItems: "center",
        width: 28,
        height: 28,
        background: alpha(theme.palette.primary.main, 0.15),
        color: "primary.main",
        borderRadius: "100%",
    };

    const handleEventClick = (
        e: React.MouseEvent<HTMLButtonElement>,
        event: EventsRecord,
    ) => {
        setSelectedEvent(event);
        setEventPopoverAnchorEl(e.currentTarget);
    };

    return (
        <>
            <Grid
                key={formattedDate}
                size={1}
                minHeight={100}
                bgcolor="background.paper"
            >
                <Stack width="100%" height="100%" spacing={0.5} p={1}>
                    <Typography
                        sx={[
                            {
                                color: disabled
                                    ? "text.disabled"
                                    : "text.primary",
                                fontWeight: 600,
                            },
                            ...(isToday ? [todayStyle] : []),
                        ]}
                    >
                        {format(day, "d")}
                    </Typography>
                    {events.map((event) => {
                        const handleClick = (
                            e: React.MouseEvent<HTMLButtonElement>,
                        ) => {
                            handleEventClick(e, event);
                        };

                        return (
                            <ButtonBase
                                key={event.id}
                                sx={{
                                    display: "flex",
                                    alignItems: "center",
                                    justifyContent: "flex-start",
                                    backgroundColor: alpha(
                                        theme.palette.primary.main,
                                        0.1,
                                    ),
                                    color: theme.palette.primary.main,
                                    ...theme.applyStyles("dark", {
                                        color: theme.palette.primary
                                            .contrastText,
                                    }),
                                    [`& .${touchRippleClasses.child}`]: {
                                        bgcolor: theme.palette.primary.light,
                                        color: theme.palette.primary.dark,
                                    },
                                    borderRadius: "4px",
                                    py: "2px",
                                    px: "6px",
                                }}
                                onClick={handleClick}
                            >
                                <Typography
                                    variant="caption"
                                    fontWeight={500}
                                    sx={{
                                        textWrap: "nowrap",
                                        overflow: "hidden",
                                        textOverflow: "ellipsis",
                                    }}
                                >
                                    {event.title}
                                </Typography>
                            </ButtonBase>
                        );
                    })}
                </Stack>
            </Grid>
            {selectedEvent && (
                <EventPopover
                    anchorEl={eventPopoverAnchorEl}
                    onClose={() => setEventPopoverAnchorEl(null)}
                    event={selectedEvent}
                />
            )}
        </>
    );
};

================
File: src/modules/scheduler/MonthlyView/EventPopover.tsx
================
import { Popover } from "@mui/material";
import { EventsRecord } from "../../../types/pb_types";
import { EventCard } from "../WeeklyView/EventCard/EventCard";

type Props = {
    event: EventsRecord;
    anchorEl: HTMLElement | null;
    onClose: () => void;
};

export const EventPopover: React.FC<Props> = ({ event, anchorEl, onClose }) => {
    return (
        <Popover open={Boolean(anchorEl)} anchorEl={anchorEl} onClose={onClose}>
            <EventCard event={event} onClose={onClose} />
        </Popover>
    );
};

================
File: src/modules/scheduler/MonthlyView/MonthlyView.tsx
================
import { Box, Grid2 as Grid, IconButton, Paper, Typography } from '@mui/material';
import { addMonths, eachDayOfInterval, endOfMonth, format, isSameDay, isSameMonth, startOfMonth, subMonths } from 'date-fns';
import { ArrowLeftIcon, ArrowRightIcon } from 'lucide-react';
import { useMemo, useState } from 'react';
import { createSelectEventsForRange } from '../../state/events/selectors/createSelectEventsForRange';
import { useAppState } from '../../state/useAppState';
import { CalendarDay } from './CalendarDay';

const daysOfWeek = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];

export const MonthlyView = () => {
    const [rangeStart, setRangeStart] = useState(startOfMonth(new Date()));
    const [rangeEnd, setRangeEnd] = useState(endOfMonth(new Date()));

    const monthDays = eachDayOfInterval({
        start: rangeStart,
        end: rangeEnd,
    });

    const paddingDaysBefore = useMemo(() => {
        const startDay = rangeStart.getDay();
        const mondayBasedStartDay = startDay === 0 ? 6 : startDay - 1;
        return Array.from({ length: mondayBasedStartDay }, (_, i) => {
            const day = new Date(rangeStart);
            day.setDate(day.getDate() - mondayBasedStartDay + i);
            return day;
        });
    }, [rangeStart]);

    const paddingDaysAfter = useMemo(() => {
        const endDay = rangeEnd.getDay();
        const mondayBasedEndDay = endDay === 0 ? 6 : endDay - 1;
        return Array.from({ length: 6 - mondayBasedEndDay }, (_, i) => {
            const day = new Date(rangeEnd);
            day.setDate(day.getDate() + i + 1);
            return day;
        });
    }, [rangeEnd]);

    const allDays = useMemo(
        () => [...paddingDaysBefore, ...monthDays, ...paddingDaysAfter],
        [paddingDaysBefore, monthDays, paddingDaysAfter],
    );

    const handlePrevious = () => {
        setRangeStart(prev => startOfMonth(subMonths(prev, 1)));
        setRangeEnd(prev => endOfMonth(subMonths(prev, 1)));
    };

    const handleNext = () => {
        setRangeStart(prev => startOfMonth(addMonths(prev, 1)));
        setRangeEnd(prev => endOfMonth(addMonths(prev, 1)));
    };

    const events = useAppState(createSelectEventsForRange(rangeStart, rangeEnd));

    const getEventsForDay = (day: Date) => {
        return events.filter(event => {
            return isSameDay(event.date, day);
        });
    };

    return (
        <Paper variant="outlined" sx={{ overflow: 'hidden' }}>
            <Box
                sx={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    p: 1,
                }}
            >
                <IconButton onClick={handlePrevious}>
                    <ArrowLeftIcon />
                </IconButton>
                <Typography fontWeight="bold">
                    {format(rangeStart, 'MMMM do')} - {format(rangeEnd, 'MMMM do yyyy')}
                </Typography>
                <IconButton onClick={handleNext}>
                    <ArrowRightIcon />
                </IconButton>
            </Box>
            <Box bgcolor="divider">
                <Grid container spacing="1px" height="100%" pt="1px" columns={7}>
                    {daysOfWeek.map(day => (
                        <Grid key={day} size={1} py={0.5} bgcolor="background.default">
                            <Typography variant="body2" color="text.secondary" fontWeight="bold" textAlign="center">
                                {day}
                            </Typography>
                        </Grid>
                    ))}
                    {allDays.map(date => {
                        const eventsForDay = getEventsForDay(date);
                        return (
                            <CalendarDay
                                key={date.toISOString()}
                                day={date}
                                events={eventsForDay}
                                disabled={!isSameMonth(date, rangeStart)}
                            />
                        );
                    })}
                </Grid>
            </Box>
        </Paper>
    );
};

================
File: src/modules/scheduler/utils/areEventsOnDay.ts
================
import { isSameDay } from "date-fns";
import type { EventsRecord } from "../../../types/Events/Event";

export const areEventsOnDay = (events: Array<EventsRecord>, day: Date) => {
    const dayEvents = events.filter((event) => {
        const date = new Date(event.date);
        return isSameDay(date, day);
    });
    return dayEvents.length > 0;
};

================
File: src/modules/scheduler/WeeklyView/EventCard/EventCard.tsx
================
import { Card, CardContent, CardHeader, List, Stack, Typography } from '@mui/material';
import { format } from 'date-fns';
import { EditIcon, Trash2Icon } from 'lucide-react';
import { ActionMenu } from '../../../../components/ActionMenu';
import { ConfirmDialog } from '../../../../components/ConfirmDialog';
import { useDialog } from '../../../../providers/DialogProvider';
import { EventsRecord } from '../../../../types/pb_types';
import { type ProjectedEvent, concretiseProjectedEvent } from '../../../state/events/concretiseProjectedEvent';
import { createSelectRoles } from '../../../state/roles/selectors/createSelectRoles';
import { useAppState } from '../../../state/useAppState';
import { EventForm, EventFormValues } from '../EventForm';
import { EventRole } from './EventRole';

type EventCardProps = {
    event: EventsRecord;
    onClose?: () => void;
};

export const EventCard = ({ event, onClose }: EventCardProps) => {
    const updateEvent = useAppState.use.updateEvent();
    const removeEvent = useAppState.use.removeEvent();
    const requiredRoles = useAppState(createSelectRoles(event.required_role_ids));

    const { showDialog, closeDialog } = useDialog();

    const handleEditSubmit = (data: EventFormValues) => {
        if ((data as ProjectedEvent).projected) {
            concretiseProjectedEvent(data as ProjectedEvent);
        } else {
            updateEvent(event.id, data);
        }

        closeDialog();
        onClose?.();
    };

    const handleEdit = () => {
        showDialog(<EventForm defaultValues={event} onCancel={closeDialog} onSubmit={handleEditSubmit} />, {
            fullWidth: true,
            maxWidth: 'md',
        });
    };

    const handleDelete = () => {
        showDialog(
            <ConfirmDialog
                title="Delete Event"
                message="Are you sure you want to delete this event?"
                onConfirm={() => {
                    removeEvent(event.id);
                    closeDialog();
                    onClose?.();
                }}
                onClose={closeDialog}
                confirmButton={{
                    text: 'Delete',
                    color: 'error',
                }}
            />,
        );
    };

    return (
        <Card variant="outlined" sx={{ width: '100%' }}>
            <CardHeader
                title={event.title}
                subheader={format(event.date, 'PPPP')}
                action={
                    <ActionMenu
                        actions={[
                            {


                            },
                        ]}
                    />
                }
            />

            <CardContent sx={{ pt: 0 }}>
                <Stack direction="row" justifyContent="space-between" spacing={2} mb={1}>
                    <Typography variant="body2" color="textSecondary">
                        Role
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Assignee
                    </Typography>
                </Stack>
                <List disablePadding>
                    {requiredRoles.map(role => (
                        <EventRole key={role.id} role={role} />
                    ))}
                </List>
            </CardContent>
        </Card>
    );
};

================
File: src/modules/scheduler/WeeklyView/EventCard/EventRole.tsx
================
import { Box, ListItem, ListItemIcon, Select, Typography } from '@mui/material';
import { useState } from 'react';
import { RolesRecord } from '../../../../types/pb_types';
import { roleIconMap } from '../../../roles/roleIcons';

type Props = {
    role: RolesRecord;
};

export const EventRole: React.FC<Props> = ({ role }) => {
    const [value, setValue] = useState('none');
    const Icon = roleIconMap[role.icon as keyof typeof roleIconMap];

    return (
        <ListItem
            sx={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                '&:first-child': { pt: 0 },
                '&:last-child': { pb: 0 },
                gap: 2,
            }}
            disableGutters
        >
            <Box display="flex">
                <ListItemIcon>{Icon ? <Icon /> : null}</ListItemIcon>
                <Typography fontWeight="bold">{role.name}</Typography>
            </Box>

            <Select size="small" error={value === 'none'} onChange={e => setValue(e.target.value)} native>
                <option value="none">None</option>
                <option value="option1">Ollie Slater</option>
            </Select>
        </ListItem>
    );
};

================
File: src/modules/scheduler/WeeklyView/Day.tsx
================
import { alpha, Box, Typography, useTheme } from "@mui/material";
import { format, isBefore, isToday, startOfDay } from "date-fns";
import { DotIcon } from "lucide-react";

type DayProps = {
    date: Date;
    eventsOnDay?: boolean;
};

export const Day: React.FC<DayProps> = ({ date, eventsOnDay }) => {
    const theme = useTheme();

    const today = isToday(date);
    const past = isBefore(date, startOfDay(new Date()));

    return (
        <Box sx={{ textAlign: "center" }}>
            <Typography
                variant="body2"
                fontWeight={600}
                color={past ? "textDisabled" : "textSecondary"}
            >
                {format(date, "EEE")}
            </Typography>
            <Typography
                sx={{
                    display: "grid",
                    placeItems: "center",
                    width: 32,
                    height: 32,
                    background: today
                        ? alpha(theme.palette.primary.main, 0.15)
                        : "transparent",
                    color: today
                        ? "primary.main"
                        : past
                          ? "text.secondary"
                          : "text.primary",
                    borderRadius: "100%",
                    fontSize: theme.typography.pxToRem(18),
                    fontWeight: today ? 800 : 500,
                }}
            >
                {format(date, "d")}
            </Typography>
            {eventsOnDay && <DotIcon />}
        </Box>
    );
};

================
File: src/modules/scheduler/WeeklyView/EventForm.tsx
================
import { zodResolver } from '@hookform/resolvers/zod';
import {
    Box,
    Button,
    DialogActions,
    DialogContent,
    DialogTitle,
    Grid2 as Grid,
    InputLabel,
    Link,
    Stack,
    TextField,
    Typography,
} from '@mui/material';
import { DateTimePicker } from '@mui/x-date-pickers';
import { Controller, useForm } from 'react-hook-form';
import { Link as RRLink } from 'react-router';
import * as z from 'zod';
import { CheckButton } from '../../../components/CheckButton';
import { useDialog } from '../../../providers/DialogProvider';
import { useAppState } from '../../state/useAppState';

const schema = z.object({
    title: z.string().min(2, 'Title must be at least 2 characters long'),
    date: z.string().datetime(),
    required_role_ids: z.array(z.custom<string>()),
});

export type EventFormValues = z.infer<typeof schema>;

type Props = {
    defaultValues?: Partial<EventFormValues>;
    onSubmit: (data: EventFormValues) => void;
    onCancel: () => void;
};

export const EventForm = ({ defaultValues, onSubmit, onCancel }: Props) => {
    const { closeDialog } = useDialog();

    const roles = useAppState.use.roles();

    const {
        control,
        handleSubmit,
        formState: { errors, isValid },
    } = useForm<EventFormValues>({
        resolver: zodResolver(schema),
        mode: 'onChange',
        defaultValues,
    });

    return (
        <form onSubmit={handleSubmit(onSubmit)}>
            <DialogTitle>{defaultValues ? 'Edit' : 'Create'} Event</DialogTitle>

            <DialogContent sx={{ overflow: 'visible' }}>
                <Stack spacing={2}>
                    <Controller
                        name="title"
                        control={control}
                        defaultValue=""
                        render={({ field }) => (
                            <TextField {...field} label="Title" error={!!errors.title} helperText={errors.title?.message} fullWidth />
                        )}
                    />

                    <Controller
                        name="date"
                        control={control}
                        defaultValue={new Date().toISOString()}
                        render={({ field: { onChange, value, ...field } }) => (
                            <DateTimePicker
                                {...field}
                                value={new Date(value)}
                                onChange={newValue => onChange(newValue?.toISOString())}
                                label="Date"
                                slotProps={{
                                    textField: {
                                        error: !!errors.date,
                                        helperText: errors.date?.message,
                                        fullWidth: true,
                                    },
                                }}
                            />
                        )}
                    />

                    <Controller
                        name="required_role_ids"
                        control={control}
                        defaultValue={[]}
                        render={({ field: { onChange, value } }) => (
                            <Box>
                                <InputLabel sx={{ mb: 1 }}>Required Roles</InputLabel>
                                <Grid container spacing={1}>
                                    {roles.map(role => {
                                        const selected = value.includes(role.id);

                                        const onClick = () => {
                                            if (selected) value.splice(value.indexOf(role.id), 1);
                                            else value.push(role.id);

                                            onChange(value);
                                        };

                                        return (
                                            <Grid key={role.id} size={{ xs: 6, sm: 4 }}>
                                                <CheckButton
                                                    onClick={onClick}
                                                    selected={selected}
                                                    color="primary"
                                                    sx={{
                                                        width: '100%',
                                                        height: '100%',
                                                    }}
                                                >
                                                    {role.name}
                                                </CheckButton>
                                            </Grid>
                                        );
                                    })}
                                    {roles.length === 0 && (
                                        <Box>
                                            <Typography variant="body2">
                                                You haven&apos;t created any roles yet.{' '}
                                                <Link component={RRLink} to="/roles" onClick={closeDialog}>
                                                    Why not try creating one?
                                                </Link>
                                            </Typography>
                                        </Box>
                                    )}
                                </Grid>
                            </Box>
                        )}
                    />
                </Stack>
            </DialogContent>

            <DialogActions>
                <Button variant="outlined" color="neutral" onClick={onCancel}>
                    Cancel
                </Button>
                <Button variant="contained" color="primary" type="submit" disabled={!isValid}>
                    Save
                </Button>
            </DialogActions>
        </form>
    );
};

================
File: src/modules/scheduler/WeeklyView/WeeklyView.tsx
================
import { Box, IconButton, Paper, Stack, Typography } from '@mui/material';
import { addWeeks, endOfWeek, format, startOfWeek, subWeeks } from 'date-fns';
import { ArrowLeftIcon, ArrowRightIcon } from 'lucide-react';
import { useMemo, useState } from 'react';
import { createSelectEventsForRange } from '../../state/events/selectors/createSelectEventsForRange';
import { useAppState } from '../../state/useAppState';
import { Events } from '../Events';
import { areEventsOnDay } from '../utils/areEventsOnDay';
import { Day } from './Day';

export const WeeklyView = () => {
    const [weekStart, setWeekStart] = useState(startOfWeek(new Date(), { weekStartsOn: 1 }));
    const [weekEnd, setWeekEnd] = useState(endOfWeek(new Date(), { weekStartsOn: 1 }));

    const days = useMemo(
        () =>
            Array.from({ length: 7 }, (_, i) => {
                const newDate = new Date(weekStart);
                newDate.setDate(weekStart.getDate() + i);
                return newDate;
            }),
        [weekStart],
    );

    const handleForward = () => {
        setWeekStart(prev => addWeeks(prev, 1));
        setWeekEnd(prev => addWeeks(prev, 1));
    };

    const handleBackward = () => {
        setWeekStart(prev => subWeeks(prev, 1));
        setWeekEnd(prev => subWeeks(prev, 1));
    };

    const events = useAppState(createSelectEventsForRange(weekStart, weekEnd));

    return (
        <>
            <Paper
                variant="outlined"
                sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    gap: 1,
                    p: 1,
                }}
            >
                <Box
                    sx={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                    }}
                >
                    <IconButton onClick={handleBackward}>
                        <ArrowLeftIcon />
                    </IconButton>
                    <Typography fontWeight="bold">
                        {format(weekStart, 'MMMM do')} - {format(weekEnd, 'MMMM do')}
                    </Typography>
                    <IconButton onClick={handleForward}>
                        <ArrowRightIcon />
                    </IconButton>
                </Box>
                <Stack direction="row" spacing={2} justifyContent="space-around">
                    {days.map((day, index) => (
                        <Day key={index} date={day} eventsOnDay={areEventsOnDay(events, day)} />
                    ))}
                </Stack>
            </Paper>
            <Events rangeStart={weekStart} rangeEnd={weekEnd} />
        </>
    );
};

================
File: src/modules/scheduler/Events.tsx
================
import { Grid2 as Grid } from '@mui/material';
import { createSelectEventsForRange } from '../state/events/selectors/createSelectEventsForRange';
import { useAppState } from '../state/useAppState';
import { EventCard } from './WeeklyView/EventCard/EventCard';

type Props = {
    rangeStart: Date;
    rangeEnd: Date;
};

export const Events: React.FC<Props> = ({ rangeStart, rangeEnd }) => {
    const events = useAppState(createSelectEventsForRange(rangeStart, rangeEnd));

    return (
        <Grid container spacing={2} width="100%" mt={2}>
            {events.map(event => (
                <Grid key={event.id} size={{ xs: 12, sm: 6 }}>
                    <EventCard event={event} />
                </Grid>
            ))}
        </Grid>
    );
};

================
File: src/modules/scheduler/SchedulerToolbar.tsx
================
import { Button, Paper, Stack, ToggleButton, ToggleButtonGroup, Toolbar } from '@mui/material';
import { DownloadIcon, PlusIcon, Sparkles as SparklesIcon } from 'lucide-react';
import { useDialog } from '../../providers/DialogProvider';
import { useAppState } from '../state/useAppState';
import { EventForm, type EventFormValues } from './WeeklyView/EventForm';

type Props = {
    viewMode: string;
    setViewMode: (value: 'weekly' | 'monthly') => void;
};

export const SchedulerToolbar = ({ viewMode, setViewMode }: Props) => {
    const { showDialog, closeDialog } = useDialog();
    const addEvent = useAppState.use.addEvent();

    const handleViewModeChange = (_: React.MouseEvent<HTMLElement>, value: 'weekly' | 'monthly') => {
        setViewMode(value);
    };

    const handleSubmitEvent = (data: EventFormValues) => {
        addEvent(data);
        closeDialog();
    };

    const handleAddEvent = () => {
        showDialog(<EventForm onCancel={closeDialog} onSubmit={handleSubmitEvent} />, { fullWidth: true });
    };

    return (
        <Toolbar disableGutters sx={{ justifyContent: 'space-between' }}>
            <Paper variant="outlined" sx={{ width: 'fit-content' }}>
                <ToggleButtonGroup exclusive value={viewMode} onChange={handleViewModeChange}>
                    <ToggleButton size="small" value="weekly">
                        Weekly View
                    </ToggleButton>
                    <ToggleButton size="small" value="monthly">
                        Monthly View
                    </ToggleButton>
                </ToggleButtonGroup>

            </Stack>
        </Toolbar>
    );
};

================
File: src/modules/settings/MeetingSettings.tsx
================
import { Box, Grid2 as Grid, IconButton, InputLabel, MenuItem, Paper, Select, SelectChangeEvent, Stack, Typography } from '@mui/material';
import { format } from 'date-fns';
import { ArrowLeftIcon } from 'lucide-react';
import { CheckButton } from '../../components/CheckButton';
import { useAppState } from '../../modules/state/useAppState';

export const MeetingSettings = () => {
    const weekdays = Array.from({ length: 7 }, (_, i) => {
        const date = new Date();
        const diff = i - (date.getDay() || 7) + 1;
        date.setDate(date.getDate() + diff);
        return date;
    });

    const roles = useAppState.use.roles();

    const midweekMeetingSettings = useAppState.use.midweekMeetingSettings();
    const setMidweekMeetingSettings = useAppState.use.setMidweekMeetingSettings();

    const weekendMeetingSettings = useAppState.use.weekendMeetingSettings();
    const setWeekendMeetingSettings = useAppState.use.setWeekendMeetingSettings();

    const handleMidweekMeetingChange = (event: SelectChangeEvent) => {
        const day = Number(event.target.value);
        setMidweekMeetingSettings({ ...midweekMeetingSettings, day });
    };

    const handleWeekendMeetingChange = (event: SelectChangeEvent) => {
        const day = Number(event.target.value);
        setWeekendMeetingSettings({ ...weekendMeetingSettings, day });
    };

    const handleToggleRole = (roleId: string, selected: boolean) => {
        const requiredRoleIds = selected
            ? midweekMeetingSettings.requiredRoleIds?.filter(id => id !== roleId)
            : [...(midweekMeetingSettings.requiredRoleIds || []), roleId];

        setMidweekMeetingSettings({ ...midweekMeetingSettings, requiredRoleIds });
        setWeekendMeetingSettings({ ...weekendMeetingSettings, requiredRoleIds });
    };

    return (
        <>
            <Stack direction="row" spacing={2} alignItems="center" mb={3}>
                <IconButton>
                    <ArrowLeftIcon />
                </IconButton>
                <Box>
                    <Typography variant="h5">Meeting Settings</Typography>
                    <Typography variant="body1">Configure the meeting schedule and required roles.</Typography>
                </Box>
            </Stack>

            <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                <Box mb={2}>
                    <Typography variant="h6">Schedule</Typography>
                    <Typography variant="body2">Configure the weekday for each meeting.</Typography>
                </Box>

                <Stack direction="row" spacing={3}>
                    <Box width="50%">
                        <InputLabel sx={{ mb: 0.5 }}>Midweek Meeting Day</InputLabel>
                        <Select value={midweekMeetingSettings.day.toString()} onChange={handleMidweekMeetingChange} fullWidth>
                            {weekdays.map(day => (
                                <MenuItem key={day.toISOString()} value={day.getDay()}>
                                    {format(day, 'EEEE')}
                                </MenuItem>
                            ))}
                        </Select>
                    </Box>
                    <Box width="50%">
                        <InputLabel sx={{ mb: 0.5 }}>Weekend Meeting Day</InputLabel>
                        <Select value={weekendMeetingSettings.day.toString()} onChange={handleWeekendMeetingChange} fullWidth>
                            {weekdays.map(day => (
                                <MenuItem key={day.toISOString()} value={day.getDay()}>
                                    {format(day, 'EEEE')}
                                </MenuItem>
                            ))}
                        </Select>
                    </Box>
                </Stack>
            </Paper>

            <Paper variant="outlined" sx={{ p: 2 }}>
                <Box mb={2}>
                    <Typography variant="h6">Roles</Typography>
                    <Typography variant="body2">Configure the required roles for each meeting.</Typography>
                </Box>

                <Grid container spacing={1}>
                    {roles.map(role => {
                        const isSelected = midweekMeetingSettings.requiredRoleIds?.includes(role.id);
                        return (
                            <Grid key={role.id} size={{ xs: 6, sm: 4 }}>
                                <CheckButton
                                    onClick={() => handleToggleRole(role.id, !!isSelected)}
                                    selected={isSelected}
                                    color="primary"
                                    sx={{
                                        width: '100%',
                                        height: '100%',
                                    }}
                                >
                                    {role.name}
                                </CheckButton>
                            </Grid>
                        );
                    })}
                </Grid>
            </Paper>
        </>
    );
};

================
File: src/modules/state/app/appSlice.ts
================
import { StateCreator } from 'zustand';

/**
 * Represents the application state.
 */
export type AppSlice = {
    orgId: string | null;
    connectionStatus: 'online' | 'unavailable' | 'offline' | null;
    loading: boolean;
    initialised: boolean;
};

/**
 * Creates the app slice for Zustand store, handling network connection status and intercepting HTTP requests
 * to automatically manage the loading state.
 *
 * @param set - Function to update the state.
 * @returns The app slice with connection and loading states.
 */
export const createAppSlice: StateCreator<AppSlice, [], [], AppSlice> = () => {
    // Define the initial state for the app slice.
    const initialState: AppSlice = {
        orgId: null,
        connectionStatus: null,
        loading: false,
        initialised: false,
    };

    return initialState;
};

================
File: src/modules/state/events/selectors/createSelectEventsForRange.ts
================
import { createSelector } from 'reselect';
import type { EventsRecord, RolesRecord } from '../../../../types/pb_types';
import { selectRoles } from '../../roles/rolesSlice';
import { selectMeetingSettings } from '../../settings/settingsSlice';
import { selectEvents } from '../eventsSlice';
import { projectMeetingEvents } from '../projectMeetingEvents';

/**
 * Creates a selector that returns the merged list of concrete events and projected meeting events
 * for the specified date range.
 *
 * @param rangeStart - The start date of the projection range.
 * @param rangeEnd - The end date of the projection range.
 * @returns A memoised selector that outputs an array of UIEvent.
 */
export const createSelectEventsForRange = (rangeStart: Date, rangeEnd: Date) =>
    createSelector([selectEvents, selectRoles, selectMeetingSettings], (events, roles, settings): Array<EventsRecord> => {
        // Filter concrete events to only include those within the date range and map them to UIEvents with their associated roles.
        const concreteUIEvents: Array<EventsRecord> = events
            .filter(event => {
                const eventDate = new Date(event.date);
                return eventDate >= rangeStart && eventDate <= rangeEnd;
            })
            .map(event => {
                const requiredRoles: Array<RolesRecord> = [];
                for (const roleId of event.required_role_ids) {
                    const role = roles.find(r => r.id === roleId);
                    if (role) requiredRoles.push(role);
                }
                return { ...event, requiredRoles };
            });

        // Generate projected meeting events based on user settings and the provided date range.
        const projectedEvents: Array<EventsRecord> = projectMeetingEvents(
            {
                midweekMeetingDay: settings.midweekMeeting.day,
                weekendMeetingDay: settings.weekendMeeting.day,
            },
            rangeStart,
            rangeEnd,
        );

        // Merge the concrete events with the projected events.
        const allEvents = [...concreteUIEvents, ...projectedEvents];

        // Sort events chronologically.
        allEvents.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
        return allEvents;
    });

================
File: src/modules/state/events/concretiseProjectedEvent.ts
================
import { EventsRecord } from "../../../types/pb_types";
import { useAppState } from "../useAppState";

export type ProjectedEvent = Omit<
    EventsRecord,
    "id" | "user_id" | "org_id" | "owner_id" | "created" | "updated"
> & { projected: true };

/**
 * Concretises a projected event by converting it into a concrete event record.
 * This function is called when a user modifies an instance of a recurring event,
 * such as assigning roles or triggering auto assign.
 *
 * @param event - The projected event to concretise. Must include the `projected` flag.
 * @returns A new concrete meeting event that can be modified independently.
 * @throws Error if the event provided is not a projected event.
 */
export function concretiseProjectedEvent(event: ProjectedEvent) {
    if (!event.projected) {
        throw new Error(
            "The event is not projected and does not require concretisation.",
        );
    }

    useAppState.getState().addEvent(event);
}

================
File: src/modules/state/events/eventsSlice.ts
================
import { createSelector } from 'reselect';
import { StateCreator } from 'zustand';
import { EventsRecord } from '../../../types/pb_types';
import pb from '../../pocketbase/pb';
import { useAppState } from '../useAppState';
import { subscribeToCollection } from '../utils/subscribeToCollection';

type EventsState = {
    events: Array<EventsRecord>;
    loading: boolean;
};

type EventsActions = {
    fetchEvents: () => Promise<void>;
    addEvent: (event: Omit<EventsRecord, 'id' | 'user_id' | 'org_id' | 'owner_id' | 'created' | 'updated'>) => Promise<void>;
    updateEvent: (id: string, event: Partial<EventsRecord>) => Promise<void>;
    removeEvent: (id: string) => Promise<void>;
};

export type EventsSlice = EventsState & EventsActions;

export const createEventsSlice: StateCreator<EventsSlice, [], [], EventsSlice> = set => {
    subscribeToCollection('events', '*', set);

    return {
        // State
        events: [],
        loading: false,

        // Actions
        fetchEvents: async () => {
            set({ loading: true });
            try {
                const events = await pb.collection<EventsRecord>('events').getFullList();
                set({ events, loading: false });
            } catch (error: unknown) {
                console.error('Error fetching events:', error);
                set({ loading: false });
            }
        },

        addEvent: async event => {
            try {
                const org_id = useAppState.getState().orgId;
                const createdEvent = await pb.collection<EventsRecord>('events').create({ ...event, org_id });
                handlers.create(createdEvent);
            } catch (error: unknown) {
                console.error('Error adding event:', error);
            }
        },

        updateEvent: async (id, event) => {
            try {
                const org_id = useAppState.getState().orgId;
                const updatedEvent = await pb.collection<EventsRecord>('events').update(id, { ...event, org_id });
                handlers.update(updatedEvent);
            } catch (error: unknown) {
                console.error('Error updating event:', error);
            }
        },

        removeEvent: async id => {
            try {
                await pb.collection('events').delete(id);
                handlers.delete(id);
            } catch (error: unknown) {
                console.error('Error removing event:', error);
            }
        },
    };
};

export const selectEvents = createSelector(
    (state: EventsSlice) => state.events,
    events => events,
);

================
File: src/modules/state/events/projectMeetingEvents.ts
================
import { addDays, startOfDay } from 'date-fns';
import { EventsRecord } from '../../../types/pb_types';
import { ProjectedEvent } from './concretiseProjectedEvent';

/**
 * Generates projected meeting events based on the provided settings.
 *
 * @param settings - The user's meeting settings.
 * @param rangeStart - The start date of the projection range.
 * @param rangeEnd - The end date of the projection range.
 * @returns An array of projected meeting events.
 * @throws Error if rangeEnd is earlier than rangeStart.
 */
export function projectMeetingEvents(
    settings: {
        midweekMeetingDay: number;
        weekendMeetingDay: number;
        midweekRequiredRoles?: Array<string>;
        weekendRequiredRoles?: Array<string>;
    },
    rangeStart: Date,
    rangeEnd: Date,
): Array<EventsRecord> {
    if (rangeEnd < rangeStart) {
        throw new Error('rangeEnd must be greater than or equal to rangeStart');
    }
    const projectedEvents = new Array<ProjectedEvent>();

    // Iterate through each day in the date range.
    for (let currentDate: Date = startOfDay(rangeStart); currentDate <= rangeEnd; currentDate = addDays(currentDate, 1)) {
        const weekday: number = currentDate.getDay();

        if (weekday === settings.midweekMeetingDay) {
            projectedEvents.push({
                title: 'Midweek Meeting',
                date: currentDate.toISOString(),
                required_role_ids: settings.midweekRequiredRoles || [],
                projected: true,
            });
        } else if (weekday === settings.weekendMeetingDay) {
            projectedEvents.push({
                title: 'Weekend Meeting',
                date: currentDate.toISOString(),
                required_role_ids: settings.weekendRequiredRoles || [],
                projected: true,
            });
        }
    }

    return projectedEvents;
}

================
File: src/modules/state/members/membersSlice.ts
================
import { StateCreator } from 'zustand';
import { MembersRecord } from '../../../types/pb_types';
import pb from '../../pocketbase/pb';
import { subscribeToCollection } from '../utils/subscribeToCollection';

export type MembersState = {
    members: Array<MembersRecord>;
    loading: boolean;
};

export type MembersActions = {
    fetchMembers: () => Promise<void>;
    addMember: (member: Omit<MembersRecord, 'id'>) => Promise<void>;
    updateMember: (id: string, member: Partial<MembersRecord>) => Promise<void>;
    removeMember: (id: string) => Promise<void>;
};

export type MembersSlice = MembersState & MembersActions;

export const createMembersSlice: StateCreator<MembersSlice, [], [], MembersSlice> = set => {
    subscribeToCollection('members', '*', set);

    return {
        members: [],
        loading: false,

        fetchMembers: async () => {
            set({ loading: true });
            try {
                const members = await pb.collection<MembersRecord>('members').getFullList();
                set({ members, loading: false });
            } catch (error: unknown) {
                console.error('Error fetching members:', error);
                set({ loading: false });
            }
        },

        /**
         * Add a new member.
         * @param member - Member data without the id.
         */
        addMember: async (member: Omit<MembersRecord, 'id'>) => {
            try {
                const createdMember = await pb.collection<MembersRecord>('members').create(member);
                set(state => ({ members: [...state.members, createdMember] }));
            } catch (error: unknown) {
                console.error('Error adding member:', error);
            }
        },

        /**
         * Update an existing member.
         * @param id - ID of the member.
         * @param member - Partial member data to update.
         */
        updateMember: async (id: string, member: Partial<MembersRecord>) => {
            try {
                const updatedMember = await pb.collection<MembersRecord>('members').update(id, member);
                set(state => ({
                    members: state.members.map(p => (p.id === id ? updatedMember : p)),
                }));
            } catch (error: unknown) {
                console.error('Error updating member:', error);
            }
        },

        /**
         * Remove a member.
         * @param id - ID of the member to remove.  */
        removeMember: async (id: string) => {
            try {
                await pb.collection('members').delete(id);
                set(state => ({
                    members: state.members.filter(p => p.id !== id),
                }));
            } catch (error: unknown) {
                console.error('Error removing member:', error);
            }
        },
    };
};

================
File: src/modules/state/members/preferencesSlice.ts
================
import { StateCreator } from "zustand";
import { MemberPreferencesRecord } from "../../../types/pb_types";
import pb from "../../pocketbase/pb";

export type PreferencesState = {
    preferences: Array<MemberPreferencesRecord>;
    loading: boolean;
};

export type PreferencesActions = {
    fetchPreferences: () => Promise<void>;
    addPreference: (
        preference: Omit<MemberPreferencesRecord, "id">,
    ) => Promise<void>;
    updatePreference: (
        id: string,
        preference: Partial<MemberPreferencesRecord>,
    ) => Promise<void>;
    removePreference: (id: string) => Promise<void>;
};

export type PreferencesSlice = PreferencesState & PreferencesActions;

export const createPreferencesSlice: StateCreator<
    PreferencesSlice,
    [],
    [],
    PreferencesSlice
> = (set) => ({
    preferences: [],
    loading: false,

    /**
     * Fetch preferences from PocketBase.
     */
    fetchPreferences: async () => {
        set({ loading: true });
        try {
            const preferences = await pb
                .collection<MemberPreferencesRecord>("preferences")
                .getFullList();
            set({ preferences, loading: false });
        } catch (error: unknown) {
            console.error("Error fetching preferences:", error);
            set({ loading: false });
        }
    },

    /**
     * Add a new preference entry.
     * @param preference - Preference data without the id.
     */
    addPreference: async (preference) => {
        try {
            const createdPreference = await pb
                .collection<MemberPreferencesRecord>("preferences")
                .create(preference);
            set((state) => ({
                preferences: [...state.preferences, createdPreference],
            }));
        } catch (error: unknown) {
            console.error("Error adding preference:", error);
        }
    },

    /**
     * Update an existing preference.
     * @param id - ID of the preference.
     * @param preference - Partial preference data to update.
     */
    updatePreference: async (id, preference) => {
        try {
            const updatedPreference = await pb
                .collection<MemberPreferencesRecord>("preferences")
                .update(id, preference);
            set((state) => ({
                preferences: state.preferences.map((p) =>
                    p.id === id ? updatedPreference : p,
                ),
            }));
        } catch (error: unknown) {
            console.error("Error updating preference:", error);
        }
    },

    /**
     * Remove a preference entry.
     * @param id - ID of the preference to remove.
     */
    removePreference: async (id) => {
        try {
            await pb
                .collection<MemberPreferencesRecord>("preferences")
                .delete(id);
            set((state) => ({
                preferences: state.preferences.filter((p) => p.id !== id),
            }));
        } catch (error: unknown) {
            console.error("Error removing preference:", error);
        }
    },
});

================
File: src/modules/state/pocketbase/authSlice.ts
================
import { jwtDecode } from 'jwt-decode';
import type { StateCreator } from 'zustand';
import { LoginParams, OauthLoginParams, PasswordLoginParams } from '../../../types/auth/LoginParams';
import { Collections, OrganisationsRecord, UsersRecord } from '../../../types/pb_types';
import pb from '../../pocketbase/pb';

export interface AuthSlice {
    isAuthenticated: boolean;
    user: UsersRecord | null;
    token: string | null;

    // Auth state indicators
    isLoading: boolean;
    error: string | null;

    // Actions
    registerUser: (data: {
        firstName: string;
        lastName: string;
        email: string;
        password: string;
    }) => Promise<void>;

    registerOrganisation: (name: string) => Promise<void>;

    login: (params: LoginParams) => Promise<void>;
    logout: () => void;
    refreshToken: () => Promise<void>;
    refreshAuthState: () => void;
}

const fiveMinutesInMs = 5 * 60 * 1000;

async function loginWithPassword(data: PasswordLoginParams) {
    return await pb.collection('users').authWithPassword(data.email, data.password);
}

async function loginWithOauth(data: OauthLoginParams) {
    return await pb.collection('users').authWithOAuth2({ provider: data.provider });
}

export const createAuthSlice: StateCreator<AuthSlice> = (set, get) => {
    const initializeAuthState = () => {
        set({
            isAuthenticated: pb.authStore.isValid,
            user: pb.authStore.record as any,
            token: pb.authStore.token,
        });
    };

    const startProactiveTokenRefresh = () => {
        const intervalId = setInterval(async () => {
            const { token, refreshToken } = get();
            if (!token) return;

            const decoded = jwtDecode<{ exp: number }>(token);
            const currentTimeInSeconds = Math.floor(Date.now() / 1000);

            // Refresh if the token is close to expiring
            if (decoded.exp - currentTimeInSeconds <= 5 * 60) {
                try {
                    await refreshToken();
                } catch (error) {
                    console.error('Token refresh failed, this may cause an unexpected logout.', error);
                }
            }
        }, fiveMinutesInMs);

        return intervalId;
    };

    pb.authStore.onChange((token, user) => {
        set({
            token,
            user: user as any,
            isAuthenticated: pb.authStore.isValid,
        });

        if (token) {
            startProactiveTokenRefresh();
        }
    });

    return {
        isAuthenticated: pb.authStore.isValid,
        user: pb.authStore.record as any,
        token: pb.authStore.token,
        isLoading: false,
        error: null,

        registerUser: async data => {
            set({ isLoading: true, error: null });
            try {
                await pb.collection('users').create({
                    name: `${data.firstName} ${data.lastName}`,
                    email: data.email,
                    password: data.password,
                    passwordConfirm: data.password,
                });

                const result = await loginWithPassword({
                    email: data.email,
                    password: data.password,
                });

                if (!result.record) {
                    throw new Error('Registration failed');
                }

                set({ isLoading: false, error: null });
            } catch (error) {
                set({
                    isLoading: false,
                    // error: error instanceof Error ? error.message : 'Registration failed',
                });
                throw error;
            }
        },

        registerOrganisation: async name => {
            const userId = get().user?.id;
            if (!userId) throw new Error('Not logged in');

            set({ isLoading: true, error: null });
            try {
                await pb.collection<OrganisationsRecord>(Collections.Organisations).create({ name, owner_id: userId });

                set({ isLoading: false, error: null });
            } catch (error) {
                set({
                    isLoading: false,
                    error: error instanceof Error ? error.message : 'Failed to register organisation',
                });
                throw error;
            }
            set({ isLoading: false, error: null });
        },

        login: async params => {
            set({ isLoading: true, error: null });
            try {
                switch (params.method) {
                    case 'password':
                        await loginWithPassword(params);
                        break;
                    case 'oauth':
                        await loginWithOauth(params);
                        break;
                    default:
                        throw new Error('Invalid login method');
                }

                set({ isLoading: false, error: null });
            } catch (error) {
                set({
                    isLoading: false,
                    // error: error instanceof Error ? error.message : 'Login failed',
                });
                throw error;
            }
        },

        logout: () => {
            pb.authStore.clear();
            set({ user: null, token: null, isAuthenticated: false });
            clearInterval(startProactiveTokenRefresh());
        },

        createOrganisation: async (data: { name: string }) => {
            try {
                await pb.collection<OrganisationsRecord>(Collections.Organisations).create(data);
            } catch {
                set({ isLoading: false });
            }
        },

        refreshToken: async () => {
            try {
                const authData = await pb.collection('users').authRefresh<UsersRecord>();
                set({
                    token: authData.token,
                    user: authData.record,
                    isAuthenticated: true,
                });
            } catch (error) {
                pb.authStore.clear();
                console.error('Token refresh failed:', error);
                throw error;
            }
        },

        refreshAuthState: () => {
            initializeAuthState();
        },
    };
};

================
File: src/modules/state/pocketbase/usePbStore.ts
================
import { create } from 'zustand';
import { createSelectors } from '../utils/createSelectors';
import { AuthSlice, createAuthSlice } from './authSlice';

type StoreState = AuthSlice;

export const usePbStore = createSelectors(
    create<StoreState>()((...a) => ({
        ...createAuthSlice(...a),
        // ...createStorageSlice(...a),
    })),
);

================
File: src/modules/state/roles/selectors/createSelectRoles.ts
================
import { createSelector } from "reselect";
import { RolesRecord } from "../../../../types/pb_types";
import { selectRoles } from "../../roles/rolesSlice";

export const createSelectRoles = (roleIds: Array<string>) =>
    createSelector([selectRoles], (allRoles): Array<RolesRecord> => {
        const roles = new Array<RolesRecord>();

        for (const roleId of roleIds) {
            const role = allRoles.find((role) => role.id === roleId);
            if (role) roles.push(role);
            else console.warn(`Role with id ${roleId} not found`);
        }

        return roles;
    });

================
File: src/modules/state/roles/rolesSlice.ts
================
import { createSelector } from 'reselect';
import type { StateCreator } from 'zustand';
import type { Role } from '../../../types/Role';
import { Collections, type RolesRecord } from '../../../types/pb_types';
import pb from '../../pocketbase/pb';
import { useAppState } from '../useAppState';
import { subscribeToCollection } from '../utils/subscribeToCollection';

type RolesState = {
    roles: Array<RolesRecord>;
    loading: boolean;
};

type RolesActions = {
    fetchRoles: () => Promise<void>;
    addRole: (role: Role) => Promise<void>;
    updateRole: (id: string, role: Role) => void;
    removeRole: (id: string) => void;
};

export type RolesSlice = RolesState & RolesActions;

export const createRolesSlice: StateCreator<RolesSlice, [], [], RolesSlice> = (set, get) => {
    subscribeToCollection('roles', '*', set);

    return {
        // State
        roles: [],
        loading: false,

        // Actions
        fetchRoles: async () => {
            set({ loading: true });
            try {
                const roles = await pb.collection<RolesRecord>(Collections.Roles).getFullList();
                set({ roles, loading: false });
            } catch (error) {
                console.error('Error fetching roles:', error);
                set({ loading: false });
            }
        },

        addRole: async (role: RolesRecord) => {
            try {
                const org_id = useAppState.getState().orgId;

                const createdRole = await pb.collection(Collections.Roles).create({ ...role, org_id });
                set(state => ({ roles: [...state.roles, createdRole] }));
            } catch (error) {
                console.error('Error adding role:', error);
            }
        },

        updateRole: async (id: string, role: RolesRecord) => {
            try {
                const org_id = useAppState.getState().orgId;

                await pb.collection<RolesRecord>(Collections.Roles).update(id, { ...role, org_id });
                set(state => ({
                    roles: state.roles.map(r => (r.id === id ? role : r)),
                }));
            } catch (error) {
                console.error('Error updating role:', error);
            }
        },

        removeRole: async (id: string) => {
            try {
                await pb.collection<RolesRecord>(Collections.Roles).delete(id);
                const filteredRoles = get().roles.filter(role => role.id !== id);

                set({ roles: filteredRoles });
            } catch (error) {
                console.error('Error removing role:', error);
            }
        },
    };
};

export const selectRoles = createSelector(
    (state: RolesSlice) => state.roles,
    roles => roles,
);

================
File: src/modules/state/settings/settingsSlice.ts
================
import { createSelector } from 'reselect';
import { StateCreator } from 'zustand';

type MeetingSettings = {
    day: number;
    time?: string;
    requiredRoleIds?: Array<string>;
};

type SettingsState = {
    midweekMeetingSettings: MeetingSettings;
    weekendMeetingSettings: MeetingSettings;
};

type SettingsActions = {
    setMidweekMeetingSettings: (settings: MeetingSettings) => void;
    setWeekendMeetingSettings: (settings: MeetingSettings) => void;
};

export type SettingsSlice = SettingsState & SettingsActions;

export const createSettingsSlice: StateCreator<SettingsSlice, [], [], SettingsSlice> = set => ({
    // State
    midweekMeetingSettings: {
        day: 4,
        time: '18:00',
    },
    weekendMeetingSettings: {
        day: 0,
        time: '10:00',
    },

    // Actions
    setMidweekMeetingSettings: settings => set({ midweekMeetingSettings: settings }),
    setWeekendMeetingSettings: settings => set({ weekendMeetingSettings: settings }),
});

export const selectMeetingSettings = createSelector(
    (state: SettingsSlice) => state.midweekMeetingSettings,
    (state: SettingsSlice) => state.weekendMeetingSettings,
    (midweekMeeting, weekendMeeting) => ({ midweekMeeting, weekendMeeting }),
);

================
File: src/modules/state/utils/createSelectors.ts
================
import { StoreApi, UseBoundStore } from 'zustand';

type WithSelectors<S> = S extends { getState: () => infer T } ? S & { use: { [K in keyof T]: () => T[K] } } : never;

export const createSelectors = <S extends UseBoundStore<StoreApi<object>>>(_store: S) => {
    const store = _store as WithSelectors<typeof _store>;
    store.use = {};
    for (const k of Object.keys(store.getState())) {
        (store.use as any)[k] = () => store(s => s[k as keyof typeof s]);
    }

    return store;
};

================
File: src/modules/state/utils/handleCollectionEvent.ts
================
import { RecordSubscription } from 'pocketbase';
import { StateSetter } from '../../../types/state/StateSetter';
import { createScopedLogger } from '../../../utils/logger';

/**
 * Generates CRUD (Create, Read, Update, Delete) event handlers for a specified state key.
 * Used to automatically handle collection events like creating, updating and deleting records.
 *
 * @typeParam T - Type of the record object, must contain an 'id' field
 * @typeParam S - Type of the state object, must be indexable by string keys
 * @param set - The state setter function from a state management system (e.g. Zustand).
 * @param key - The state key to update when handling collection events.
 * @returns A collection event handler function that processes create/update/delete operations.
 *
 * @example
 * const handleEvents = handleCollectionEvent(setState, 'todos');
 * pb.collection('todos').subscribe('*', handleEvents);
 */
export const handleCollectionEvent = <T extends { id: string }, S extends { [key: string]: unknown }>(
    set: StateSetter<S>,
    key: keyof S & string,
) => {
    const logger = createScopedLogger(`${key} sub`);

    const handleCreate = (record: T) => {
        set(
            (state: S) =>
                ({
                    [key]: [...(state[key] as T[]), record],
                }) as Partial<S>,
        );
    };

    const handleUpdate = (record: T) => {
        set(
            (state: S) =>
                ({
                    [key]: (state[key] as T[]).map(item => (item.id === record.id ? record : item)),
                }) as Partial<S>,
        );
    };

    const handleDelete = (id: string) => {
        set(
            (state: S) =>
                ({
                    [key]: (state[key] as T[]).filter(item => item.id !== id),
                }) as Partial<S>,
        );
    };

    return (event: RecordSubscription<T>) => {
        logger.info(`Incoming ${event.action} event received`, event.record);
        switch (event.action) {
            case 'create':
                handleCreate(event.record);
                break;
            case 'update':
                handleUpdate(event.record);
                break;
            case 'delete':
                handleDelete(event.record.id);
                break;
        }
    };
};

================
File: src/modules/state/utils/subscribeToCollection.ts
================
import { Collections } from '../../../types/pb_types';
import { StateSetter } from '../../../types/state/StateSetter';
import pb from '../../pocketbase/pb';
import { AppState } from '../useAppState';
import { handleCollectionEvent } from './handleCollectionEvent';

export const subscribeToCollection = (col: `${Collections}`, topic = '*', set: StateSetter<AppState>) => {
    pb.collection(col).unsubscribe(topic);
    pb.collection(col).subscribe(topic, handleCollectionEvent(set, col as keyof AppState));
};

================
File: src/modules/state/useAppState.ts
================
import { create } from 'zustand';
import { createJSONStorage, persist } from 'zustand/middleware';
import { logger } from '../../utils/logger';
import { AppSlice, createAppSlice } from './app/appSlice';
import { createEventsSlice, type EventsSlice } from './events/eventsSlice';
import { createMembersSlice, type MembersSlice } from './members/membersSlice';
import { createPreferencesSlice, type PreferencesSlice } from './members/preferencesSlice';
import { createRolesSlice, type RolesSlice } from './roles/rolesSlice';
import { createSettingsSlice, type SettingsSlice } from './settings/settingsSlice';
import { createSelectors } from './utils/createSelectors';

export type AppState = AppSlice & EventsSlice & RolesSlice & PreferencesSlice & SettingsSlice & MembersSlice;

export const useAppState = createSelectors(
    create<AppState>()(
        persist(
            (...a) => ({
                ...createAppSlice(...a),
                ...createEventsSlice(...a),
                ...createRolesSlice(...a),
                ...createMembersSlice(...a),
                ...createPreferencesSlice(...a),
                ...createSettingsSlice(...a),
            }),
            {
                name: 'appState',
                storage: createJSONStorage(() => localStorage),
                onRehydrateStorage: () => (state, error) => {
                    if (error) {
                        logger.error('[useAppState] Error rehydrating state:', error);
                    } else {
                        if (!state) return;
                    }
                },
                partialize: state => Object.fromEntries(Object.entries(state).filter(([key]) => !['initialised'].includes(key))),
            },
        ),
    ),
);

(window as any).useAppState = useAppState;

================
File: src/providers/DialogProvider.tsx
================
import { Dialog, DialogProps } from "@mui/material";
import { createContext, useContext, useState } from "react";

type DialogContextType = {
    /**
     * Renders a dialog with the given content.
     * @param content - The react content of the dialog.
     */
    showDialog: (
        content: React.ReactNode,
        props?: Omit<DialogProps, "open">,
    ) => void;
    /**
     * Closes the currently open dialog.
     */
    closeDialog: () => void;
};

export const DialogContext = createContext<DialogContextType | null>(null);

export const DialogProvider = ({ children }: { children: React.ReactNode }) => {
    const [dialogProps, setDialogProps] = useState<Omit<
        DialogProps,
        "open"
    > | null>(null);
    const [dialogOpen, setDialogOpen] = useState(false);
    const [dialogContent, setDialogContent] = useState<React.ReactNode | null>(
        null,
    );

    const showDialog = (
        content: React.ReactNode,
        props?: Omit<DialogProps, "open">,
    ) => {
        setDialogProps(props || null);
        setDialogContent(content);
        setDialogOpen(true);
    };

    const closeDialog = () => {
        setDialogOpen(false);
    };

    return (
        <DialogContext.Provider value={{ showDialog, closeDialog }}>
            {children}
            <Dialog open={dialogOpen} onClose={closeDialog} {...dialogProps}>
                {dialogContent}
            </Dialog>
        </DialogContext.Provider>
    );
};

export const useDialog = () => {
    const context = useContext(DialogContext);
    if (!context) {
        throw new Error("useDialogs must be used within a DialogProvider");
    }
    return context;
};

================
File: src/theme/customisations/data-display.ts
================
import { Components, Theme } from "@mui/material";

export const dataDisplayCustomisations: Components<Theme> = {
    MuiListItemIcon: {
        styleOverrides: {
            root: ({ theme }) => ({
                minWidth: 0,
                marginRight: theme.spacing(2),
            }),
        },
    },
};

================
File: src/theme/customisations/feedback.ts
================
import { Components, Theme } from "@mui/material";

export const feedbackCustomisations: Components<Theme> = {
    MuiDialog: {
        styleOverrides: {
            paper: {
                backgroundImage: "none",
            },
            container: {
                backdropFilter: "blur(8px)",
            },
        },
    },
};

================
File: src/theme/customisations/inputs.ts
================
import { alpha, Components, darken, lighten, Theme, toggleButtonGroupClasses } from '@mui/material';

export const inputCustomisations: Components<Theme> = {
    MuiButton: {
        defaultProps: {
            disableElevation: true,
        },
        styleOverrides: {
            root: ({ theme, ownerState }) => ({
                textTransform: 'none',
                variants: [
                    {
                        props: {
                            size: 'small',
                        },
                        style: {
                            height: '2.25rem',
                            padding: '8px 12px',
                        },
                    },
                    {
                        props: {
                            size: 'medium',
                        },
                        style: {
                            height: '2.5rem', // 40px
                        },
                    },
                    {
                        props: {
                            variant: 'contained',
                        },
                        style: {
                            '&:hover': {
                                backgroundColor: darken(
                                    ownerState.color && ownerState.color !== 'inherit'
                                        ? theme.palette[ownerState.color]?.main || theme.palette.primary.main
                                        : theme.palette.primary.main,
                                    theme.palette.mode === 'dark' ? 0.3 : 0.2,
                                ),
                            },
                        },
                    },
                    {
                        props: {
                            variant: 'outlined',
                        },
                        style: () => {
                            const paletteColor =
                                ownerState.color && ownerState.color !== 'inherit'
                                    ? theme.palette[ownerState.color] || theme.palette.primary
                                    : theme.palette.primary;

                            const mode = theme.palette.mode;

                            return {
                                backgroundColor: mode === 'dark' ? paletteColor.dark : lighten(paletteColor.light, 0.8),
                                color: mode === 'dark' ? paletteColor.main : paletteColor.dark,
                                borderColor: lighten(paletteColor.dark, 0.2),
                                '&:hover': {
                                    borderColor: mode === 'dark' ? lighten(paletteColor.dark, 0.3) : lighten(paletteColor.light, 0.0),
                                },
                            };
                        },
                    },
                    {
                        props: {
                            color: 'neutral',
                            variant: 'outlined',
                        },
                        style: [
                            {
                                color: theme.palette.grey[700],
                                border: '1px solid',
                                borderColor: theme.palette.divider,
                                backgroundColor: theme.palette.background.paper,
                                '&:hover': {
                                    backgroundColor: darken(theme.palette.background.paper, 0.05),
                                    borderColor: alpha(theme.palette.divider, 0.2),
                                },
                            },
                            theme.applyStyles('dark', {
                                color: theme.palette.grey[50],
                                border: '1px solid',
                                borderColor: theme.palette.divider,
                                backgroundColor: theme.palette.background.paper,
                                '&:hover': {
                                    borderColor: alpha(theme.palette.divider, 0.2),
                                    backgroundColor: lighten(theme.palette.background.paper, 0.05),
                                },
                            }),
                        ],
                    },
                ],
            }),
        },
    },
    MuiToggleButtonGroup: {
        variants: [
            {
                props: {
                    size: 'small',
                },
                style: {
                    height: '2.25rem',
                    padding: '8px 12px',
                },
            },
            {
                props: {
                    size: 'medium',
                },
                style: {
                    height: '2.5rem', // 40px
                },
            },
        ],
        styleOverrides: {
            root: ({ theme }) => ({
                [`& .${toggleButtonGroupClasses.grouped}`]: {
                    textTransform: 'none',
                    margin: theme.spacing(0.5),
                    border: 0,
                    borderRadius: theme.shape.borderRadius - 4,
                    [`&.${toggleButtonGroupClasses.disabled}`]: {
                        border: 0,
                    },
                },
                [`& .${toggleButtonGroupClasses.middleButton},& .${toggleButtonGroupClasses.lastButton}`]: {
                    marginLeft: -1,
                    borderLeft: '1px solid transparent',
                },
            }),
        },
    },
    MuiInputBase: {
        styleOverrides: {
            root: ({ theme, ownerState }) => ({
                '.MuiOutlinedInput-notchedOutline': {
                    transition: 'border-color 0.1s ease-in-out, border-width 0.1s ease-in-out',
                },

                '&:hover:not(.Mui-focused) .MuiOutlinedInput-notchedOutline': {
                    borderColor: !ownerState.disabled && !ownerState.error && ownerState.color && theme.palette.text.secondary,
                },
            }),
        },
    },
};

================
File: src/theme/customisations/navigation.ts
================
import { Components, Fade, Theme } from '@mui/material';

export const navigationCustomisations: Components<Theme> = {
    MuiLink: {
        defaultProps: {
            color: 'info',
            underline: 'hover',
        },
    },
    MuiMenu: {
        defaultProps: {
            TransitionComponent: Fade,
        },
        styleOverrides: {
            root: ({ theme }) => ({
                '& .MuiMenuItem-root .MuiListItemIcon-root': {
                    minWidth: 0,
                    marginRight: theme.spacing(1.5),
                },
            }),
        },
    },
};

================
File: src/theme/customisations/surfaces.ts
================
import { Components, Theme } from "@mui/material";

export const surfacesCustomisations: Components<Theme> = {
    MuiCardContent: {
        styleOverrides: {
            root: ({ theme }) => ({
                "&:last-child": {
                    paddingBottom: theme.spacing(2),
                },
            }),
        },
    },
};

================
File: src/theme/colorSchemes.ts
================
import { ColorSystemOptions, createTheme } from '@mui/material';
import { DefaultColorScheme } from '@mui/material/styles/createThemeWithVars';

const theme = createTheme();
const augmentColor = createTheme().palette.augmentColor;

type ColorSchemes = (Partial<Record<DefaultColorScheme, boolean | ColorSystemOptions>> & Record<never, ColorSystemOptions>) | undefined;

export const colorSchemes: ColorSchemes = {
    light: {
        palette: {
            background: {
                default: '#FAFAFA',
                paper: '#FFF',
            },
            divider: 'rgba(20, 20, 20, 0.1)',
            primary: theme.palette.augmentColor({
                color: {
                    main: '#007AFF',
                },
            }),
            secondary: theme.palette.augmentColor({
                color: {
                    main: '#000',
                },
            }),
            neutral: theme.palette.augmentColor({
                color: {
                    main: '#E2E2E2',
                },
            }),
            success: theme.palette.augmentColor({
                color: {
                    main: 'hsl(150, 86%, 42%)',
                },
            }),
            info: theme.palette.augmentColor({
                color: {
                    main: 'hsl(216, 75%, 60%)',
                },
            }),
            warning: theme.palette.augmentColor({
                color: {
                    main: 'hsl(60, 100%, 42%)',
                },
            }),
            error: theme.palette.augmentColor({
                color: {
                    main: 'hsl(11deg, 100%, 59%)',
                },
            }),
        },
    },
    dark: {
        palette: {
            mode: 'dark',
            background: {
                default: '#060E13',
                paper: '#101419',
            },
            text: {
                primary: '#fff',
                secondary: '#999',
                disabled: '#666',
            },
            divider: 'rgba(255, 255, 255, 0.05)',
            primary: augmentColor({
                color: {
                    main: '#007AFF',
                    dark: 'hsl(211deg, 100%, 6%)',
                    contrastText: '#fff',
                },
            }),
            secondary: augmentColor({
                color: {
                    main: 'hsl(0, 0%, 99%)',
                    dark: '#000000',
                },
            }),
            neutral: augmentColor({
                color: {
                    main: '#E2E2E2',

                    contrastText: '#000',
                },
            }),
            info: augmentColor({
                color: {
                    main: 'hsl(216, 87%, 65%)',
                    dark: 'hsl(215, 100%, 6%)',
                },
            }),
            success: augmentColor({
                color: {
                    main: 'hsl(150, 86%, 65%)',
                    dark: 'hsl(150, 100%, 6%)',
                },
            }),
            warning: augmentColor({
                color: {
                    dark: 'hsl(64, 100%, 6%)',
                    main: 'hsl(46, 87%, 65%)',
                },
            }),
            error: theme.palette.augmentColor({
                color: {
                    dark: 'hsl(358, 76%, 10%)',
                    main: 'hsl(358, 100%, 70%)',
                    light: 'hsl(358, 100%, 81%)',
                },
            }),
        },
    },
};

================
File: src/theme/primatives.ts
================
import { ThemeOptions } from "@mui/material";

export const typography: ThemeOptions["typography"] = {
    fontFamily: "system-ui, -apple-system",
    h5: {
        fontWeight: "bold",
    },
    button: {
        fontWeight: 600,
    },
};

export const shape: ThemeOptions["shape"] = {
    borderRadius: 8,
};

================
File: src/theme/theme.ts
================
import { alpha, createTheme } from "@mui/material";
import { colorSchemes } from "./colorSchemes";
import { dataDisplayCustomisations } from "./customisations/data-display";
import { feedbackCustomisations } from "./customisations/feedback";
import { inputCustomisations } from "./customisations/inputs";
import { navigationCustomisations } from "./customisations/navigation";
import { surfacesCustomisations } from "./customisations/surfaces";
import { shape, typography } from "./primatives";

declare module "@mui/material/styles" {
    interface Palette {
        neutral: Palette["primary"];
    }

    interface PaletteOptions {
        neutral?: PaletteOptions["primary"];
    }
}

declare module "@mui/material/Button" {
    interface ButtonPropsColorOverrides {
        neutral: true;
    }
}

const theme = createTheme({
    cssVariables: true,
    colorSchemes,
    typography,
    shape,
    components: {
        ...inputCustomisations,
        ...dataDisplayCustomisations,
        ...feedbackCustomisations,
        ...surfacesCustomisations,
        ...navigationCustomisations,
        MuiCssBaseline: {
            styleOverrides: (theme) => ({
                body: {
                    background: alpha(theme.palette.background.default, 0.8),
                },
            }),
        },
    },
});

export default theme;

================
File: src/types/assignees/AssigneePreferences.ts
================
export type AssigneePreferences = {};

================
File: src/types/auth/LoginParams.ts
================
export type PasswordLoginParams = {
    method?: 'password';
    email: string;
    password: string;
};

export type OtpLoginParams = {
    method?: 'otp';
    email: string;
};

export type OauthLoginParams = {
    method?: 'oauth';
    provider: 'google' | 'facebook' | 'apple';
};

export type LoginParams = PasswordLoginParams | OtpLoginParams | OauthLoginParams;

================
File: src/types/auth/PermissionLevel.ts
================
export enum PermissionLevel {
    /** Can view schedules and members in their organisation, but cannot make any changes. */
    ReadOnly = 0,

    /** Can edit only their own member record and preferences. No access to others. */
    MemberEditor = 1,

    /** Can manage assignments, create/edit events, and modify any member's preferences in their organisation. */
    Scheduler = 2,

    /** Can manage members, assign roles, configure roles in their organisation, and override schedules. */
    Admin = 3,

    /** Full control over the organisation's data. Can add/remove users from org.*/
    Owner = 4,
}

================
File: src/types/state/StateGetter.ts
================
export type StateGetter<S> = () => S;

================
File: src/types/state/StateSetter.ts
================
export type StateSetter<S> = (partial: S | Partial<S> | ((state: S) => S | Partial<S>), replace?: false | undefined) => void;

================
File: src/types/pb_types.ts
================
/**
* This file was @generated using pocketbase-typegen
*/

import type PocketBase from 'pocketbase'
import type { RecordService } from 'pocketbase'

export enum Collections {
	Authorigins = "_authOrigins",
	Externalauths = "_externalAuths",
	Mfas = "_mfas",
	Otps = "_otps",
	Superusers = "_superusers",
	Assignees = "assignees",
	Events = "events",
	MemberPreferences = "member_preferences",
	Members = "members",
	Organisations = "organisations",
	Roles = "roles",
	Users = "users",
}

// Alias types for improved usability
export type IsoDateString = string
export type RecordIdString = string
export type HTMLString = string

// System fields
export type BaseSystemFields<T = never> = {
	id: RecordIdString
	collectionId: string
	collectionName: Collections
	expand?: T
}

export type AuthSystemFields<T = never> = {
	email: string
	emailVisibility: boolean
	username: string
	verified: boolean
} & BaseSystemFields<T>

// Record types for each collection

export type AuthoriginsRecord = {
	collectionRef: string
	created?: IsoDateString
	fingerprint: string
	id: string
	recordRef: string
	updated?: IsoDateString
}

export type ExternalauthsRecord = {
	collectionRef: string
	created?: IsoDateString
	id: string
	provider: string
	providerId: string
	recordRef: string
	updated?: IsoDateString
}

export type MfasRecord = {
	collectionRef: string
	created?: IsoDateString
	id: string
	method: string
	recordRef: string
	updated?: IsoDateString
}

export type OtpsRecord = {
	collectionRef: string
	created?: IsoDateString
	id: string
	password: string
	recordRef: string
	sentTo?: string
	updated?: IsoDateString
}

export type SuperusersRecord = {
	created?: IsoDateString
	email: string
	emailVisibility?: boolean
	id: string
	password: string
	tokenKey: string
	updated?: IsoDateString
	verified?: boolean
}

export type AssigneesRecord = {
	created?: IsoDateString
	event_id?: RecordIdString
	id: string
	member_id?: RecordIdString
	org_id?: RecordIdString
	owner_id?: RecordIdString
	role_id?: RecordIdString
	updated?: IsoDateString
}

export type EventsRecord = {
	created?: IsoDateString
	date: IsoDateString
	description?: string
	id: string
	org_id: RecordIdString
	owner_id: RecordIdString
	required_role_ids: RecordIdString[]
	title: string
	updated?: IsoDateString
}

export type MemberPreferencesRecord = {
	avoided_roles?: RecordIdString[]
	created?: IsoDateString
	id: string
	max_per_month?: number
	member_id?: RecordIdString
	min_gap_days?: number
	org_id?: RecordIdString
	owner_id?: RecordIdString
	preferred_roles?: RecordIdString[]
	updated?: IsoDateString
}

export type MembersRecord = {
	active?: boolean
	created?: IsoDateString
	id: string
	name?: string
	org_id: RecordIdString
	owner_id: RecordIdString
	permission_level?: number
	updated?: IsoDateString
}

export type OrganisationsRecord = {
	created?: IsoDateString
	id: string
	name?: string
	owner_id: RecordIdString
	updated?: IsoDateString
}

export type RolesRecord = {
	created?: IsoDateString
	description?: string
	icon: string
	id: string
	maxAssignments?: number
	minAssignments?: number
	name: string
	org_id?: RecordIdString
	owner_id?: RecordIdString
	updated?: IsoDateString
}

export type UsersRecord = {
	avatar?: string
	created?: IsoDateString
	email: string
	emailVisibility?: boolean
	id: string
	name?: string
	org_ids?: RecordIdString[]
	password: string
	tokenKey: string
	updated?: IsoDateString
	verified?: boolean
}

// Response types include system fields and match responses from the PocketBase API
export type AuthoriginsResponse<Texpand = unknown> = Required<AuthoriginsRecord> & BaseSystemFields<Texpand>
export type ExternalauthsResponse<Texpand = unknown> = Required<ExternalauthsRecord> & BaseSystemFields<Texpand>
export type MfasResponse<Texpand = unknown> = Required<MfasRecord> & BaseSystemFields<Texpand>
export type OtpsResponse<Texpand = unknown> = Required<OtpsRecord> & BaseSystemFields<Texpand>
export type SuperusersResponse<Texpand = unknown> = Required<SuperusersRecord> & AuthSystemFields<Texpand>
export type AssigneesResponse<Texpand = unknown> = Required<AssigneesRecord> & BaseSystemFields<Texpand>
export type EventsResponse<Texpand = unknown> = Required<EventsRecord> & BaseSystemFields<Texpand>
export type MemberPreferencesResponse<Texpand = unknown> = Required<MemberPreferencesRecord> & BaseSystemFields<Texpand>
export type MembersResponse<Texpand = unknown> = Required<MembersRecord> & BaseSystemFields<Texpand>
export type OrganisationsResponse<Texpand = unknown> = Required<OrganisationsRecord> & BaseSystemFields<Texpand>
export type RolesResponse<Texpand = unknown> = Required<RolesRecord> & BaseSystemFields<Texpand>
export type UsersResponse<Texpand = unknown> = Required<UsersRecord> & AuthSystemFields<Texpand>

// Types containing all Records and Responses, useful for creating typing helper functions

export type CollectionRecords = {
	_authOrigins: AuthoriginsRecord
	_externalAuths: ExternalauthsRecord
	_mfas: MfasRecord
	_otps: OtpsRecord
	_superusers: SuperusersRecord
	assignees: AssigneesRecord
	events: EventsRecord
	member_preferences: MemberPreferencesRecord
	members: MembersRecord
	organisations: OrganisationsRecord
	roles: RolesRecord
	users: UsersRecord
}

export type CollectionResponses = {
	_authOrigins: AuthoriginsResponse
	_externalAuths: ExternalauthsResponse
	_mfas: MfasResponse
	_otps: OtpsResponse
	_superusers: SuperusersResponse
	assignees: AssigneesResponse
	events: EventsResponse
	member_preferences: MemberPreferencesResponse
	members: MembersResponse
	organisations: OrganisationsResponse
	roles: RolesResponse
	users: UsersResponse
}

// Type for usage with type asserted PocketBase instance
// https://github.com/pocketbase/js-sdk#specify-typescript-definitions

export type TypedPocketBase = PocketBase & {
	collection(idOrName: '_authOrigins'): RecordService<AuthoriginsResponse>
	collection(idOrName: '_externalAuths'): RecordService<ExternalauthsResponse>
	collection(idOrName: '_mfas'): RecordService<MfasResponse>
	collection(idOrName: '_otps'): RecordService<OtpsResponse>
	collection(idOrName: '_superusers'): RecordService<SuperusersResponse>
	collection(idOrName: 'assignees'): RecordService<AssigneesResponse>
	collection(idOrName: 'events'): RecordService<EventsResponse>
	collection(idOrName: 'member_preferences'): RecordService<MemberPreferencesResponse>
	collection(idOrName: 'members'): RecordService<MembersResponse>
	collection(idOrName: 'organisations'): RecordService<OrganisationsResponse>
	collection(idOrName: 'roles'): RecordService<RolesResponse>
	collection(idOrName: 'users'): RecordService<UsersResponse>
}

================
File: src/types/Role.ts
================
import { roleIconMap } from "../modules/roles/roleIcons";

export type Role = {
    id: string;
    name: string;
    description?: string;
    icon: keyof typeof roleIconMap;
    minAssignments?: number;
    maxAssignments?: number;
};

================
File: src/utils/logger.ts
================
export type DebugLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error';
import { Chalk } from 'chalk';

const chalk = new Chalk({ level: 3 });

type LoggerFunction = (...messages: any[]) => void;

export interface Logger {
    trace: LoggerFunction;
    debug: LoggerFunction;
    info: LoggerFunction;
    warn: LoggerFunction;
    error: LoggerFunction;
    setLevel: (level: DebugLevel) => void;
}

let currentLevel: DebugLevel = (import.meta.env.VITE_LOG_LEVEL ?? import.meta.env.DEV) ? 'debug' : 'info';

export const logger: Logger = {
    trace: (...messages: any[]) => log('trace', undefined, messages),
    debug: (...messages: any[]) => log('debug', undefined, messages),
    info: (...messages: any[]) => log('info', undefined, messages),
    warn: (...messages: any[]) => log('warn', undefined, messages),
    error: (...messages: any[]) => log('error', undefined, messages),
    setLevel,
};

export function createScopedLogger(scope: string): Logger {
    return {
        trace: (...messages: any[]) => log('trace', scope, messages),
        debug: (...messages: any[]) => log('debug', scope, messages),
        info: (...messages: any[]) => log('info', scope, messages),
        warn: (...messages: any[]) => log('warn', scope, messages),
        error: (...messages: any[]) => log('error', scope, messages),
        setLevel,
    };
}

function setLevel(level: DebugLevel) {
    if ((level === 'trace' || level === 'debug') && import.meta.env.PROD) {
        return;
    }

    currentLevel = level;
}

function log(level: DebugLevel, scope: string | undefined, messages: unknown[]): void {
    const levelOrder: DebugLevel[] = ['trace', 'debug', 'info', 'warn', 'error'];

    if (levelOrder.indexOf(level) < levelOrder.indexOf(currentLevel)) {
        return;
    }

    const labelBackgroundColor = getColorForLevel(level);
    const labelTextColor = level === 'warn' ? '#000000' : '#FFFFFF';

    const labelStyles = getLabelStyles(labelBackgroundColor, labelTextColor);
    const scopeStyles = getLabelStyles('#77828D', 'white');

    const parts: string[] = [];
    const styles: string[] = [];

    parts.push(`%c ${level.toUpperCase()} `);
    styles.push(labelStyles);

    if (scope) {
        parts.push(`%c ${scope} `);
        styles.push(scopeStyles);
    }

    if (typeof window !== 'undefined') {
        console.log(parts.join(' '), ...styles, ...messages);
    } else {
        const prefix = scope
            ? `${formatText(` ${level.toUpperCase()} `, labelTextColor, labelBackgroundColor)} ${formatText(` ${scope} `, '#FFFFFF', '#77828D')}`
            : `${formatText(` ${level.toUpperCase()} `, labelTextColor, labelBackgroundColor)}`;
        console.log(prefix, ...messages);
    }
}

function formatText(text: string, color: string, bg: string) {
    return chalk.bgHex(bg)(chalk.hex(color)(text));
}

function getLabelStyles(color: string, textColor: string) {
    return `background-color: ${color}; color: white; border: 4px solid ${color}; color: ${textColor};`;
}

function getColorForLevel(level: DebugLevel): string {
    switch (level) {
        case 'trace':
        case 'debug': {
            return '#77828D';
        }
        case 'info': {
            return '#1389FD';
        }
        case 'warn': {
            return '#FFDB6C';
        }
        case 'error': {
            return '#EE4744';
        }
        default: {
            return '#000000';
        }
    }
}

export const renderLogger = createScopedLogger('Render');

================
File: src/views/auth/LoginView.tsx
================
import AppleIcon from '@mui/icons-material/Apple';
import GoogleIcon from '@mui/icons-material/Google';
import { Box, Button, CircularProgress, Container, Divider, Link, Stack, TextField, Typography } from '@mui/material';
import { useState } from 'react';
import { NavLink } from 'react-router';
import { useAuth } from '../../hooks/useAuth';

export const LoginView = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const { login, isLoading, user, error } = useAuth();

    const handleSubmit = () => {
        login({ method: 'password', email, password });
    };

    const handleAuthWithApple = () => {
        login({ method: 'oauth', provider: 'apple' });
    };

    const handleAuthWithGoogle = () => {
        login({ method: 'oauth', provider: 'google' });
    };

    const disabled = Boolean(!email || !password || isLoading || user);

    return (
        <Container maxWidth="sm">
            <Stack spacing={2}>
                <Box>
                    <Typography variant="h5">Welcome</Typography>
                    <Typography variant="subtitle1">Please sign in to continue.</Typography>
                </Box>
                <TextField
                    label="Email"
                    type="email"
                    id="email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    disabled={isLoading}
                />
                <TextField
                    label="Password"
                    type="password"
                    id="password"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    disabled={isLoading}
                />
                <Link variant="body2" component={NavLink} to="/forgot-password">
                    Forgot password?
                </Link>
                <Button variant="contained" color="primary" fullWidth onClick={handleSubmit} disabled={disabled}>
                    {isLoading ? <CircularProgress size={24} /> : 'Sign In'}
                </Button>
                {error && (
                    <Typography variant="body2" color="error.main">
                        {error}
                    </Typography>
                )}
                <Stack direction="row" spacing={1} width="100%" justifyContent="center">
                    <Typography variant="body2">Don't have an account?</Typography>
                    <Link variant="body2" component={NavLink} to="/register">
                        Sign Up
                    </Link>
                </Stack>
                <Divider>OR</Divider>
                <Button variant="contained" color="secondary" startIcon={<AppleIcon />} onClick={handleAuthWithApple} fullWidth>
                    Sign In with Apple
                </Button>
                <Button
                    variant="contained"
                    color="secondary"
                    startIcon={<GoogleIcon strokeWidth={24} />}
                    onClick={handleAuthWithGoogle}
                    fullWidth
                >
                    Sign In with Google
                </Button>
            </Stack>
        </Container>
    );
};

================
File: src/views/auth/RegisterOrganisationView.tsx
================
import { Box, Button, Container, Divider, Stack, TextField, Typography, useTheme } from '@mui/material';
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router';
import { useAuth } from '../../hooks/useAuth';

export const RegisterOrganisationView = () => {
    const theme = useTheme();
    const navigate = useNavigate();
    const { user, registerOrganisation } = useAuth();

    useEffect(() => {
        if ((user?.org_ids ?? []).length > 0) navigate('/');
    }, []);

    const [organisationName, setOrganisationName] = useState('');
    const [invitationCode, setInvitationCode] = useState('');

    const handleRegisterOrganisation = () => {
        registerOrganisation(organisationName);
    };

    return (
        <Container maxWidth="sm" sx={{ containerType: 'inline-size' }}>
            <Stack spacing={2}>
                <Box>
                    <Typography variant="h5">Hi, {user?.name}</Typography>
                    <Typography variant="subtitle1">You&apos;ll need to create or join an organisation to continue</Typography>
                </Box>

                <Stack
                    gap={2}
                    sx={{
                        flexDirection: 'row',
                        [theme.containerQueries.down('xs')]: {
                            flexDirection: 'column',
                        },
                    }}
                >
                    <Stack spacing={2}>
                        <TextField label="Congregation Name" value={organisationName} onChange={e => setOrganisationName(e.target.value)} />
                        <Button variant="contained" onClick={handleRegisterOrganisation}>
                            Create
                        </Button>
                    </Stack>

                    <Divider orientation={theme.breakpoints.down('sm') ? 'horizontal' : 'vertical'} flexItem>
                        <Typography variant="body2">OR</Typography>
                    </Divider>

                    <Stack spacing={2}>
                        <TextField label="Invitation Code" value={invitationCode} onChange={e => setInvitationCode(e.target.value)} />
                        <Button variant="contained" onClick={() => console.log('Organisation registered')}>
                            Join
                        </Button>
                    </Stack>
                </Stack>
            </Stack>
        </Container>
    );
};

================
File: src/views/auth/RegisterView.tsx
================
import AppleIcon from '@mui/icons-material/Apple';
import GoogleIcon from '@mui/icons-material/Google';
import { Box, Button, CircularProgress, Container, Divider, Link, Stack, TextField, Typography } from '@mui/material';
import { useState } from 'react';
import { NavLink, useNavigate } from 'react-router';
import { usePbStore } from '../../modules/state/pocketbase/usePbStore';

export const RegisterView = () => {
    const navigate = useNavigate();

    const [error, setError] = useState('');

    const [name, setName] = useState({ first: '', last: '' });
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const { registerUser, login, isLoading, user } = usePbStore();

    const handleSubmit = async () => {
        try {
            await registerUser({
                firstName: name.first,
                lastName: name.last,
                email,
                password,
            });

            navigate('/register/organisation');
        } catch (error) {
            if (error instanceof Error) {
                setError(error.message);
            } else {
                setError('An unknown error occurred');
                console.error(error);
            }
        }
    };

    const handleAuthWithGoogle = () => {
        login({ method: 'oauth', provider: 'google' });
    };

    const handleAuthWithApple = () => {
        login({ method: 'oauth', provider: 'apple' });
    };

    const disabled = Boolean(!email || !password || isLoading || user);

    return (
        <Container maxWidth="sm">
            <Stack spacing={2}>
                <Box>
                    <Typography variant="h5">Welcome</Typography>
                    <Typography variant="subtitle1">Create an account to get started.</Typography>
                </Box>
                <Stack spacing={2} direction="row" width="100%">
                    <TextField
                        label="First Name"
                        id="first-name"
                        value={name.first}
                        onChange={e => setName({ ...name, first: e.target.value })}
                        fullWidth
                        disabled={isLoading}
                    />
                    <TextField
                        label="Last Name"
                        id="last-name"
                        value={name.last}
                        onChange={e => setName({ ...name, last: e.target.value })}
                        fullWidth
                        disabled={isLoading}
                    />
                </Stack>
                <TextField
                    label="Email"
                    type="email"
                    id="email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    disabled={isLoading}
                />
                <TextField
                    label="Password"
                    type="password"
                    id="password"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    disabled={isLoading}
                />
                <Link variant="body2" component={NavLink} to="/forgot-password">
                    Forgot password?
                </Link>

                <Button variant="contained" color="primary" fullWidth onClick={handleSubmit} disabled={disabled}>
                    {isLoading ? <CircularProgress size={24} /> : 'Register'}
                </Button>
                {error && (
                    <Typography variant="body2" color="error.main">
                        {error}
                    </Typography>
                )}
                <Stack direction="row" spacing={1} width="100%" justifyContent="center">
                    <Typography variant="body2">Already have an account?</Typography>
                    <Link component={NavLink} to="/login">
                        <Typography variant="body2" color="info.main" sx={{ cursor: 'pointer' }}>
                            Sign In
                        </Typography>
                    </Link>
                </Stack>
                <Divider>OR</Divider>
                <Button variant="contained" color="secondary" startIcon={<AppleIcon />} onClick={handleAuthWithApple} fullWidth>
                    Sign Up with Apple
                </Button>
                <Button variant="contained" color="secondary" startIcon={<GoogleIcon />} onClick={handleAuthWithGoogle} fullWidth>
                    Sign Up with Google
                </Button>
                {/* <Button
            variant="contained"
            fullWidth
            onClick={handleAuthWithGithub}
            sx={{
              backgroundColor: "#24292e",
              "&:hover": {
                backgroundColor: "#1d1f21",
              },
            }}
            startIcon={<GithubIcon />}
          >
            Sign In with Github
          </Button> */}
            </Stack>
        </Container>
    );
};

================
File: src/views/developer/ThemePreviewView.tsx
================
import {
    Accordion,
    AccordionDetails,
    AccordionSummary,
    Alert,
    AppBar,
    Avatar,
    Badge,
    BottomNavigation,
    BottomNavigationAction,
    Box,
    Breadcrumbs,
    Button,
    Card,
    CardActions,
    CardContent,
    CardMedia,
    Checkbox,
    Chip,
    CircularProgress,
    Container,
    Divider,
    Drawer,
    FormControl,
    FormControlLabel,
    FormLabel,
    Grid,
    IconButton,
    LinearProgress,
    Link,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Menu,
    MenuItem,
    Paper,
    Radio,
    RadioGroup,
    Select,
    Slider,
    Snackbar,
    Switch,
    Tab,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Tabs,
    TextField,
    Toolbar,
    Tooltip,
    Typography,
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import {
    ChevronDown as ExpandMoreIcon,
    Heart as FavoriteIcon,
    Home as HomeIcon,
    MapPin as LocationOnIcon,
    Mail as MailIcon,
    Menu as MenuIcon,
    User as PersonIcon,
    Clock as RestoreIcon,
} from 'lucide-react';
import { useState } from 'react';

export const ThemePreviewView = (): JSX.Element => {
    const theme = useTheme();
    const [tabValue, setTabValue] = useState(0);
    const [sliderValue, setSliderValue] = useState(30);
    const [checked, setChecked] = useState(true);
    const [radioValue, setRadioValue] = useState('a');
    const [switchChecked, setSwitchChecked] = useState(true);
    const [drawerOpen, setDrawerOpen] = useState(false);
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement | null>(null);
    const [bottomNavValue, setBottomNavValue] = useState(0);

    // Component Section
    const ComponentSection = ({ title, children }: { title: string; children: React.ReactNode }) => (
        <Box sx={{ mb: 6 }}>
            <Typography variant="h5" color="primary" gutterBottom sx={{ mb: 3, borderBottom: `1px solid ${theme.palette.divider}`, pb: 1 }}>
                {title}
            </Typography>
            {children}
        </Box>
    );

    // Variant Showcase
    const VariantShowcase = ({ title, children }: { title: string; children: React.ReactNode }) => (
        <Box sx={{ mb: 4 }}>
            <Typography variant="h6" gutterBottom sx={{ mb: 2 }}>
                {title}
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>{children}</Box>
        </Box>
    );

    // Handlers with proper typing
    const handleMenuOpen = (event: React.MouseEvent<HTMLButtonElement>) => setMenuAnchorEl(event.currentTarget);
    const handleMenuClose = () => setMenuAnchorEl(null);

    // Handler for slider to address type issues
    const handleSliderChange = (_event: Event, newValue: number | number[]) => {
        if (typeof newValue === 'number') {
            setSliderValue(newValue);
        }
    };

    return (
        <Box>
            <AppBar position="static">
                <Toolbar>
                    <IconButton edge="start" color="inherit" aria-label="menu" sx={{ mr: 2 }} onClick={() => setDrawerOpen(true)}>
                        <MenuIcon size={24} />
                    </IconButton>
                    <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
                        Theme Showcase
                    </Typography>
                    <Button color="inherit" onClick={() => setSnackbarOpen(true)}>
                        Snackbar
                    </Button>
                    <Button color="inherit" aria-controls="simple-menu" aria-haspopup="true" onClick={handleMenuOpen}>
                        Menu
                    </Button>
                </Toolbar>
            </AppBar>

            <Container maxWidth="lg" sx={{ py: 4 }}>
                <Typography variant="h3" component="h1" gutterBottom>
                    Theme Components
                </Typography>
                <Typography variant="body1" paragraph>
                    This page showcases all MUI components and their variants with the current theme applied.
                </Typography>

                <Grid container spacing={4}>
                    <Grid item xs={12} md={8}>
                        {/* Buttons */}
                        <ComponentSection title="Buttons">
                            <VariantShowcase title="Button Variants">
                                <Button variant="text">Text</Button>
                                <Button variant="contained">Contained</Button>
                                <Button variant="outlined">Outlined</Button>
                            </VariantShowcase>

                            <VariantShowcase title="Button Colors">
                                <Button variant="text" color="primary">
                                    Primary
                                </Button>
                                <Button variant="text" color="secondary">
                                    Secondary
                                </Button>
                                <Button variant="text" color="error">
                                    Error
                                </Button>
                                <Button variant="text" color="warning">
                                    Warning
                                </Button>
                                <Button variant="text" color="info">
                                    Info
                                </Button>
                                <Button variant="text" color="success">
                                    Success
                                </Button>
                                <Button variant="text" disabled>
                                    Disabled
                                </Button>
                            </VariantShowcase>
                            <VariantShowcase title="">
                                <Button variant="outlined" color="primary">
                                    Primary
                                </Button>
                                <Button variant="outlined" color="secondary">
                                    Secondary
                                </Button>
                                <Button variant="outlined" color="error">
                                    Error
                                </Button>
                                <Button variant="outlined" color="warning">
                                    Warning
                                </Button>
                                <Button variant="outlined" color="info">
                                    Info
                                </Button>
                                <Button variant="outlined" color="success">
                                    Success
                                </Button>
                                <Button variant="outlined" disabled>
                                    Disabled
                                </Button>
                            </VariantShowcase>
                            <VariantShowcase title="">
                                <Button variant="contained" color="primary">
                                    Primary
                                </Button>
                                <Button variant="contained" color="secondary">
                                    Secondary
                                </Button>
                                <Button variant="contained" color="error">
                                    Error
                                </Button>
                                <Button variant="contained" color="warning">
                                    Warning
                                </Button>
                                <Button variant="contained" color="info">
                                    Info
                                </Button>
                                <Button variant="contained" color="success">
                                    Success
                                </Button>
                                <Button variant="contained" disabled>
                                    Disabled
                                </Button>
                            </VariantShowcase>

                            <VariantShowcase title="Button Sizes">
                                <Button variant="contained" size="small">
                                    Small
                                </Button>
                                <Button variant="contained" size="medium">
                                    Medium
                                </Button>
                                <Button variant="contained" size="large">
                                    Large
                                </Button>
                            </VariantShowcase>
                        </ComponentSection>

                        {/* Typography */}
                        <ComponentSection title="Typography">
                            <Typography variant="h1" gutterBottom>
                                h1. Heading
                            </Typography>
                            <Typography variant="h2" gutterBottom>
                                h2. Heading
                            </Typography>
                            <Typography variant="h3" gutterBottom>
                                h3. Heading
                            </Typography>
                            <Typography variant="h4" gutterBottom>
                                h4. Heading
                            </Typography>
                            <Typography variant="h5" gutterBottom>
                                h5. Heading
                            </Typography>
                            <Typography variant="h6" gutterBottom>
                                h6. Heading
                            </Typography>
                            <Typography variant="subtitle1" gutterBottom>
                                subtitle1. Lorem ipsum dolor sit amet.
                            </Typography>
                            <Typography variant="subtitle2" gutterBottom>
                                subtitle2. Lorem ipsum dolor sit amet.
                            </Typography>
                            <Typography variant="body1" gutterBottom>
                                body1. Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                            </Typography>
                            <Typography variant="body2" gutterBottom>
                                body2. Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                            </Typography>
                            <Typography variant="button" display="block" gutterBottom>
                                BUTTON TEXT
                            </Typography>
                            <Typography variant="caption" display="block" gutterBottom>
                                caption text
                            </Typography>
                            <Typography variant="overline" display="block" gutterBottom>
                                OVERLINE TEXT
                            </Typography>
                        </ComponentSection>

                        {/* Form Controls */}
                        <ComponentSection title="Form Controls">
                            <VariantShowcase title="Text Fields">
                                <TextField label="Standard" variant="standard" />
                                <TextField label="Filled" variant="filled" />
                                <TextField label="Outlined" variant="outlined" />
                                <TextField label="Disabled" disabled variant="outlined" />
                                <TextField label="Error" error helperText="Error message" variant="outlined" />
                            </VariantShowcase>

                            <VariantShowcase title="Checkboxes">
                                <FormControlLabel
                                    control={<Checkbox checked={checked} onChange={() => setChecked(!checked)} />}
                                    label="Standard"
                                />
                                <FormControlLabel disabled control={<Checkbox checked={checked} />} label="Disabled" />
                                <FormControlLabel control={<Checkbox indeterminate />} label="Indeterminate" />
                            </VariantShowcase>

                            <VariantShowcase title="Radio Buttons">
                                <FormControl component="fieldset">
                                    <FormLabel component="legend">Radio Group</FormLabel>
                                    <RadioGroup value={radioValue} onChange={e => setRadioValue(e.target.value)}>
                                        <FormControlLabel value="a" control={<Radio />} label="Option A" />
                                        <FormControlLabel value="b" control={<Radio />} label="Option B" />
                                        <FormControlLabel value="c" disabled control={<Radio />} label="Disabled" />
                                    </RadioGroup>
                                </FormControl>
                            </VariantShowcase>

                            <VariantShowcase title="Switches">
                                <FormControlLabel
                                    control={<Switch checked={switchChecked} onChange={() => setSwitchChecked(!switchChecked)} />}
                                    label="Standard"
                                />
                                <FormControlLabel disabled control={<Switch checked={switchChecked} />} label="Disabled" />
                            </VariantShowcase>

                            <VariantShowcase title="Select">
                                <FormControl variant="outlined" sx={{ minWidth: 200 }}>
                                    <FormLabel>Standard Select</FormLabel>
                                    <Select defaultValue={10}>
                                        <MenuItem value={10}>Option 1</MenuItem>
                                        <MenuItem value={20}>Option 2</MenuItem>
                                        <MenuItem value={30}>Option 3</MenuItem>
                                    </Select>
                                </FormControl>
                            </VariantShowcase>

                            <VariantShowcase title="Slider">
                                <Box sx={{ width: 300 }}>
                                    <Slider value={sliderValue} onChange={handleSliderChange} aria-labelledby="continuous-slider" />
                                </Box>
                            </VariantShowcase>
                        </ComponentSection>

                        {/* Data Display */}
                        <ComponentSection title="Data Display">
                            <VariantShowcase title="Chips">
                                <Chip label="Basic" />
                                <Chip label="Clickable" onClick={() => console.log('Clicked')} />
                                <Chip label="Deletable" onDelete={() => console.log('Delete')} />
                                <Chip avatar={<Avatar>M</Avatar>} label="With Avatar" />
                                <Chip icon={<FavoriteIcon size={16} />} label="With Icon" />
                                <Chip label="Primary" color="primary" />
                                <Chip label="Success" color="success" />
                            </VariantShowcase>

                            <VariantShowcase title="Dividers">
                                <Box sx={{ width: '100%' }}>
                                    <Typography variant="body1">Above Divider</Typography>
                                    <Divider />
                                    <Typography variant="body1">Below Divider</Typography>
                                    <Divider textAlign="left">LEFT</Divider>
                                    <Typography variant="body1">Below Left Divider</Typography>
                                    <Divider textAlign="center">CENTER</Divider>
                                </Box>
                            </VariantShowcase>

                            <VariantShowcase title="Lists">
                                <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>
                                    <ListItem>
                                        <ListItemIcon>
                                            <HomeIcon size={24} />
                                        </ListItemIcon>
                                        <ListItemText primary="List item with icon" />
                                    </ListItem>
                                    <Divider />
                                    <ListItem>
                                        <ListItemText primary="Clickable list item" />
                                    </ListItem>
                                    <ListItem>
                                        <ListItemText primary="Primary text" secondary="Secondary text" />
                                    </ListItem>
                                </List>
                            </VariantShowcase>

                            <VariantShowcase title="Tooltips">
                                <Tooltip title="Basic Tooltip">
                                    <Button>Hover me</Button>
                                </Tooltip>
                                <Tooltip title="Tooltip with placement" placement="right">
                                    <Button>Right</Button>
                                </Tooltip>
                                <Tooltip title="Arrow Tooltip" arrow>
                                    <Button>With Arrow</Button>
                                </Tooltip>
                            </VariantShowcase>

                            <VariantShowcase title="Tables">
                                <TableContainer component={Paper} sx={{ maxWidth: 650 }}>
                                    <Table aria-label="simple table">
                                        <TableHead>
                                            <TableRow>
                                                <TableCell>Name</TableCell>
                                                <TableCell align="right">Calories</TableCell>
                                                <TableCell align="right">Fat (g)</TableCell>
                                            </TableRow>
                                        </TableHead>
                                        <TableBody>
                                            <TableRow>
                                                <TableCell component="th" scope="row">
                                                    Pizza
                                                </TableCell>
                                                <TableCell align="right">266</TableCell>
                                                <TableCell align="right">10</TableCell>
                                            </TableRow>
                                            <TableRow>
                                                <TableCell component="th" scope="row">
                                                    Burger
                                                </TableCell>
                                                <TableCell align="right">305</TableCell>
                                                <TableCell align="right">15</TableCell>
                                            </TableRow>
                                        </TableBody>
                                    </Table>
                                </TableContainer>
                            </VariantShowcase>
                        </ComponentSection>

                        {/* Navigation */}
                        <ComponentSection title="Navigation">
                            <VariantShowcase title="Breadcrumbs">
                                <Breadcrumbs aria-label="breadcrumb">
                                    <Link underline="hover" color="inherit" href="#">
                                        MUI
                                    </Link>
                                    <Link underline="hover" color="inherit" href="#">
                                        Core
                                    </Link>
                                    <Typography color="text.primary">Breadcrumbs</Typography>
                                </Breadcrumbs>
                            </VariantShowcase>

                            <VariantShowcase title="Tabs">
                                <Box sx={{ width: '100%' }}>
                                    <Tabs value={tabValue} onChange={(_, newValue) => setTabValue(newValue)}>
                                        <Tab label="Item One" />
                                        <Tab label="Item Two" />
                                        <Tab label="Item Three" />
                                    </Tabs>
                                </Box>
                            </VariantShowcase>

                            <VariantShowcase title="Bottom Navigation">
                                <Paper sx={{ width: 500, maxWidth: '100%' }} elevation={3}>
                                    <BottomNavigation
                                        value={bottomNavValue}
                                        onChange={(_, newValue) => {
                                            setBottomNavValue(newValue);
                                        }}
                                        showLabels
                                    >
                                        <BottomNavigationAction label="Recents" icon={<RestoreIcon size={24} />} />
                                        <BottomNavigationAction label="Favorites" icon={<FavoriteIcon size={24} />} />
                                        <BottomNavigationAction label="Nearby" icon={<LocationOnIcon size={24} />} />
                                    </BottomNavigation>
                                </Paper>
                            </VariantShowcase>
                        </ComponentSection>

                        {/* Feedback */}
                        <ComponentSection title="Feedback">
                            <VariantShowcase title="Alerts">
                                <Alert severity="error">This is an error alert!</Alert>
                                <Alert severity="warning">This is a warning alert!</Alert>
                                <Alert severity="info">This is an information alert!</Alert>
                                <Alert severity="success">This is a success alert!</Alert>
                            </VariantShowcase>

                            <VariantShowcase title="Badges">
                                <Badge badgeContent={4} color="primary">
                                    <MailIcon size={24} />
                                </Badge>
                                <Badge badgeContent={4} color="secondary">
                                    <MailIcon size={24} />
                                </Badge>
                                <Badge badgeContent={0} color="primary" showZero>
                                    <MailIcon size={24} />
                                </Badge>
                                <Badge badgeContent={99} color="error" max={50}>
                                    <MailIcon size={24} />
                                </Badge>
                            </VariantShowcase>

                            <VariantShowcase title="Progress">
                                <CircularProgress />
                                <CircularProgress color="secondary" />
                                <Box sx={{ width: '100%' }}>
                                    <LinearProgress />
                                </Box>
                                <Box sx={{ width: '100%', mt: 2 }}>
                                    <LinearProgress color="success" />
                                </Box>
                            </VariantShowcase>
                        </ComponentSection>

                        {/* Surfaces */}
                        <ComponentSection title="Surfaces">
                            <VariantShowcase title="Accordion">
                                <Accordion sx={{ width: '100%' }}>
                                    <AccordionSummary expandIcon={<ExpandMoreIcon size={24} />}>
                                        <Typography>Accordion 1</Typography>
                                    </AccordionSummary>
                                    <AccordionDetails>
                                        <Typography>
                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit
                                            amet blandit leo lobortis eget.
                                        </Typography>
                                    </AccordionDetails>
                                </Accordion>
                                <Accordion sx={{ width: '100%' }}>
                                    <AccordionSummary expandIcon={<ExpandMoreIcon size={24} />}>
                                        <Typography>Accordion 2</Typography>
                                    </AccordionSummary>
                                    <AccordionDetails>
                                        <Typography>
                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit
                                            amet blandit leo lobortis eget.
                                        </Typography>
                                    </AccordionDetails>
                                </Accordion>
                            </VariantShowcase>

                            <VariantShowcase title="Card">
                                <Card sx={{ maxWidth: 345 }}>
                                    <CardMedia
                                        component="img"
                                        height="140"
                                        image="https://source.unsplash.com/random/345x140"
                                        alt="random image"
                                    />
                                    <CardContent>
                                        <Typography gutterBottom variant="h5" component="div">
                                            Card Title
                                        </Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            Content that could be displayed inside a card component to demonstrate its appearance.
                                        </Typography>
                                    </CardContent>
                                    <CardActions>
                                        <Button size="small">Share</Button>
                                        <Button size="small">Learn More</Button>
                                    </CardActions>
                                </Card>
                            </VariantShowcase>

                            <VariantShowcase title="Paper">
                                <Paper elevation={0} sx={{ p: 2 }}>
                                    <Typography>Elevation 0</Typography>
                                </Paper>
                                <Paper elevation={1} sx={{ p: 2 }}>
                                    <Typography>Elevation 1</Typography>
                                </Paper>
                                <Paper elevation={3} sx={{ p: 2 }}>
                                    <Typography>Elevation 3</Typography>
                                </Paper>
                                <Paper elevation={6} sx={{ p: 2 }}>
                                    <Typography>Elevation 6</Typography>
                                </Paper>
                                <Paper elevation={12} sx={{ p: 2 }}>
                                    <Typography>Elevation 12</Typography>
                                </Paper>
                                <Paper elevation={24} sx={{ p: 2 }}>
                                    <Typography>Elevation 24</Typography>
                                </Paper>
                            </VariantShowcase>
                        </ComponentSection>
                    </Grid>

                    <Grid item xs={12} md={4}>
                        <Paper sx={{ p: 3, position: 'sticky', top: 20 }}>
                            <Typography variant="h6" gutterBottom>
                                Theme Palette
                            </Typography>
                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Primary</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1 }}>
                                    <Box sx={{ bgcolor: 'primary.light', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'primary.main', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'primary.dark', width: 40, height: 40, borderRadius: 1 }} />
                                </Box>
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Secondary</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1 }}>
                                    <Box sx={{ bgcolor: 'secondary.light', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'secondary.main', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'secondary.dark', width: 40, height: 40, borderRadius: 1 }} />
                                </Box>
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Error</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1 }}>
                                    <Box sx={{ bgcolor: 'error.light', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'error.main', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'error.dark', width: 40, height: 40, borderRadius: 1 }} />
                                </Box>
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Warning</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1 }}>
                                    <Box sx={{ bgcolor: 'warning.light', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'warning.main', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'warning.dark', width: 40, height: 40, borderRadius: 1 }} />
                                </Box>
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Info</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1 }}>
                                    <Box sx={{ bgcolor: 'info.light', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'info.main', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'info.dark', width: 40, height: 40, borderRadius: 1 }} />
                                </Box>
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Success</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1 }}>
                                    <Box sx={{ bgcolor: 'success.light', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'success.main', width: 40, height: 40, borderRadius: 1 }} />
                                    <Box sx={{ bgcolor: 'success.dark', width: 40, height: 40, borderRadius: 1 }} />
                                </Box>
                            </Box>

                            <Divider sx={{ my: 2 }} />

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Text</Typography>
                                <Box sx={{ mb: 1 }}>
                                    <Typography variant="body2" sx={{ color: 'text.primary' }}>
                                        Text Primary
                                    </Typography>
                                    <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                                        Text Secondary
                                    </Typography>
                                    <Typography variant="body2" sx={{ color: 'text.disabled' }}>
                                        Text Disabled
                                    </Typography>
                                </Box>
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Background</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1 }}>
                                    <Box
                                        sx={{
                                            bgcolor: 'background.paper',
                                            width: 40,
                                            height: 40,
                                            borderRadius: 1,
                                            border: '1px solid #ddd',
                                        }}
                                    />
                                    <Box
                                        sx={{
                                            bgcolor: 'background.default',
                                            width: 40,
                                            height: 40,
                                            borderRadius: 1,
                                            border: '1px solid #ddd',
                                        }}
                                    />
                                </Box>
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="subtitle2">Divider</Typography>
                                <Box sx={{ display: 'flex', mb: 1, gap: 1, alignItems: 'center' }}>
                                    <Box sx={{ bgcolor: 'divider', width: 60, height: 4, borderRadius: 1 }} />
                                </Box>
                            </Box>

                            <Box>
                                <Typography variant="subtitle2">Action</Typography>
                                <Box sx={{ mb: 1 }}>
                                    <Box sx={{ bgcolor: 'action.active', width: 40, height: 40, borderRadius: 1, mb: 1 }} />
                                    <Box
                                        sx={{
                                            bgcolor: 'action.hover',
                                            width: 40,
                                            height: 40,
                                            borderRadius: 1,
                                            mb: 1,
                                            border: '1px solid #ddd',
                                        }}
                                    />
                                    <Box
                                        sx={{
                                            bgcolor: 'action.selected',
                                            width: 40,
                                            height: 40,
                                            borderRadius: 1,
                                            mb: 1,
                                            border: '1px solid #ddd',
                                        }}
                                    />
                                    <Box
                                        sx={{
                                            bgcolor: 'action.disabled',
                                            width: 40,
                                            height: 40,
                                            borderRadius: 1,
                                            mb: 1,
                                            border: '1px solid #ddd',
                                        }}
                                    />
                                    <Box
                                        sx={{
                                            bgcolor: 'action.disabledBackground',
                                            width: 40,
                                            height: 40,
                                            borderRadius: 1,
                                            border: '1px solid #ddd',
                                        }}
                                    />
                                </Box>
                            </Box>
                        </Paper>
                    </Grid>
                </Grid>
            </Container>

            {/* Drawer */}
            <Drawer anchor="left" open={drawerOpen} onClose={() => setDrawerOpen(false)}>
                <Box sx={{ width: 250 }} role="presentation">
                    <List>
                        <ListItem>
                            <ListItemIcon>
                                <HomeIcon size={24} />
                            </ListItemIcon>
                            <ListItemText primary="Home" />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <PersonIcon size={24} />
                            </ListItemIcon>
                            <ListItemText primary="Profile" />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <MailIcon size={24} />
                            </ListItemIcon>
                            <ListItemText primary="Messages" />
                        </ListItem>
                    </List>
                    <Divider />
                    <List>
                        <ListItem>
                            <ListItemText primary="Settings" />
                        </ListItem>
                        <ListItem>
                            <ListItemText primary="Help" />
                        </ListItem>
                    </List>
                </Box>
            </Drawer>

            {/* Snackbar */}
            <Snackbar
                open={snackbarOpen}
                autoHideDuration={6000}
                onClose={() => setSnackbarOpen(false)}
                message="This is a snackbar"
                action={
                    <Button color="secondary" size="small" onClick={() => setSnackbarOpen(false)}>
                        CLOSE
                    </Button>
                }
            />

            {/* Menu */}
            <Menu id="simple-menu" anchorEl={menuAnchorEl} keepMounted open={Boolean(menuAnchorEl)} onClose={handleMenuClose}>
                <MenuItem onClick={handleMenuClose}>Profile</MenuItem>
                <MenuItem onClick={handleMenuClose}>My account</MenuItem>
                <MenuItem onClick={handleMenuClose}>Logout</MenuItem>
            </Menu>
        </Box>
    );
};

================
File: src/views/settings/MeetingSettingsView.tsx
================
import { MeetingSettings } from '../../modules/settings/MeetingSettings';

export const MeetingSettingsView = () => {
    return (
        <>
            <MeetingSettings />
        </>
    );
};

================
File: src/views/settings/SettingsView.tsx
================
import { Divider, ListItem, ListItemButton, ListItemText, Paper, Stack, Typography } from '@mui/material';
import { ChevronRightIcon } from 'lucide-react';
import { useNavigate } from 'react-router';
import { useAuth } from '../../hooks/useAuth';

export const SettingsView = () => {
    const navigate = useNavigate();
    const { logout } = useAuth();

    return (
        <>
            <Typography variant="h5" gutterBottom>
                Settings
            </Typography>

            <Stack gap={1}>
                <Paper variant="outlined" sx={{ overflow: 'hidden' }}>
                    <ListItemButton onClick={() => navigate('/settings/meetings')}>
                        <ListItemText primary="Meeting Schedule" secondary="Configure your meeting schedule and required roles" />
                        <ChevronRightIcon />
                    </ListItemButton>
                </Paper>
                <Paper variant="outlined" sx={{ overflow: 'hidden' }}>
                    <ListItemButton onClick={() => navigate('/developer/theme-preview')}>
                        <ListItemText primary="Theme Preview" secondary="Preview and customize your theme" />
                        <ChevronRightIcon />
                    </ListItemButton>
                </Paper>

                <Divider sx={{ my: 1 }} />

                <ListItem component={Paper} variant="outlined" sx={{ overflow: 'hidden' }} disablePadding>
                    <ListItemButton onClick={logout}>
                        <ListItemText primary="Logout" secondary="Logout from your account" />
                        <ChevronRightIcon />
                    </ListItemButton>
                </ListItem>
            </Stack>
        </>
    );
};

================
File: src/views/404.tsx
================
import { Box, Button, Typography } from '@mui/material';
import { ArrowLeftIcon, HomeIcon } from 'lucide-react';
import { useNavigate } from 'react-router';

export const NotFound = () => {
    const navigate = useNavigate();

    const handleBack = () => window.history.back();
    const handleHome = () => navigate('/');

    const canGoBack = window.history.length > 1;

    return (
        <>
            <Box
                sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    width: '100dvw',
                    height: '100dvh',
                }}
            >
                <Typography variant="h1">404</Typography>
                <Typography>
                    Oops! Page not found <code>¯\_(ツ)_/¯</code>

                )}
            </Box>
        </>
    );
};

================
File: src/views/MembersView.tsx
================
import { Typography } from '@mui/material';
import { MembersList } from '../modules/members/MembersList';

export const MembersView = () => {
    return (
        <>
            <Typography variant="h5">Members</Typography>
            <MembersList />
        </>
    );
};

================
File: src/views/RolesView.tsx
================
import { Typography } from "@mui/material";
import { RolesList } from "../modules/roles/RolesList";
import { RolesToolbar } from "../modules/roles/RolesToolbar";
import { useAppState } from "../modules/state/useAppState";

export const RolesView = () => {
    const roles = useAppState.use.roles();

    return (
        <>
            <Typography variant="h5">Roles</Typography>
            <RolesToolbar />
            <RolesList roles={roles} />
        </>
    );
};

================
File: src/views/ScheduleView.tsx
================
import { Typography } from '@mui/material';
import { useState } from 'react';
import { MonthlyView } from '../modules/scheduler/MonthlyView/MonthlyView';
import { SchedulerToolbar } from '../modules/scheduler/SchedulerToolbar';
import { WeeklyView } from '../modules/scheduler/WeeklyView/WeeklyView';

export const ScheduleView = () => {
    const [viewMode, setViewMode] = useState<'weekly' | 'monthly'>('weekly');

    return (
        <>
            <Typography variant="h5">Meeting Schedule</Typography>

            <SchedulerToolbar viewMode={viewMode} setViewMode={setViewMode} />
            {viewMode === 'weekly' && <WeeklyView />}
            {viewMode === 'monthly' && <MonthlyView />}
        </>
    );
};

================
File: src/App.tsx
================
import { AnimatePresence } from 'motion/react';
import { useEffect } from 'react';
import { BrowserRouter, Route, Routes } from 'react-router';
import { AuthLayout } from './layouts/AuthLayout';
import { Layout } from './layouts/Layout';
import { PageLayout } from './layouts/PageLayout';
import { LoaderGate } from './modules/initialisation/LoaderGate';
import pb from './modules/pocketbase/pb';
import { logger } from './utils/logger';
import { NotFound } from './views/404';
import { LoginView } from './views/auth/LoginView';
import { RegisterOrganisationView } from './views/auth/RegisterOrganisationView';
import { RegisterView } from './views/auth/RegisterView';
import { ThemePreviewView } from './views/developer/ThemePreviewView';
import { MembersView } from './views/MembersView';
import { RolesView } from './views/RolesView';
import { ScheduleView } from './views/ScheduleView';
import { MeetingSettingsView } from './views/settings/MeetingSettingsView';
import { SettingsView } from './views/settings/SettingsView';

export const App = () => {
    useEffect(() => {
        return () => {
            logger.info('Unsubscribing from all realtime subscriptions');
            pb.realtime.unsubscribe();
        };
    });

    return (
        <BrowserRouter>
            <LoaderGate>
                <AnimatePresence mode="wait">
                    <Routes>
                        <Route element={<Layout />}>
                            <Route element={<AuthLayout />}>
                                <Route path="/login" element={<LoginView />} />
                                <Route path="/register" element={<RegisterView />} />
                                <Route path="/register/organisation" element={<RegisterOrganisationView />} />
                                <Route path="/reset-password" />
                            </Route>

                            <Route element={<PageLayout />}>
                                <Route index element={<ScheduleView />} />
                                <Route path="/schedule" element={<ScheduleView />} />
                                <Route path="/members" element={<MembersView />} />
                                <Route path="/roles" element={<RolesView />} />
                                <Route path="/settings" element={<SettingsView />} />
                                <Route path="/settings/meetings" element={<MeetingSettingsView />} />
                                <Route path="/developer/theme-preview" element={<ThemePreviewView />} />
                            </Route>
                            <Route path="*" element={<NotFound />} />
                        </Route>
                    </Routes>
                </AnimatePresence>
            </LoaderGate>
        </BrowserRouter>
    );
};

================
File: src/main.tsx
================
import { CssBaseline, ThemeProvider } from '@mui/material';
import { createRoot } from 'react-dom/client';
import { App } from './App';
import theme from './theme/theme';

createRoot(document.getElementById('root') as HTMLElement).render(
    <ThemeProvider theme={theme}>
        <CssBaseline />
        <App />
    </ThemeProvider>,
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: src-tauri/capabilities/default.json
================
{
    "$schema": "../gen/schemas/desktop-schema.json",
    "identifier": "default",
    "description": "Capability for the main window",
    "windows": [
        "main"
    ],
    "permissions": [
        "core:default",
        "opener:default"
    ]
}

================
File: src-tauri/gen/apple/Assets.xcassets/AppIcon.appiconset/Contents.json
================
{
  "images" : [
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "AppIcon-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "AppIcon-20x20@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "AppIcon-29x29@2x-1.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "AppIcon-29x29@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "AppIcon-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "AppIcon-40x40@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "AppIcon-60x60@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "AppIcon-60x60@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "AppIcon-20x20@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "AppIcon-20x20@2x-1.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "AppIcon-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "AppIcon-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "AppIcon-40x40@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "AppIcon-40x40@2x-1.png",
      "scale" : "2x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "AppIcon-76x76@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "AppIcon-76x76@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "83.5x83.5",
      "idiom" : "ipad",
      "filename" : "AppIcon-83.5x83.5@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "1024x1024",
      "idiom" : "ios-marketing",
      "filename" : "AppIcon-512@2x.png",
      "scale" : "1x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

================
File: src-tauri/gen/apple/Assets.xcassets/Contents.json
================
{
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

================
File: src-tauri/gen/apple/quibble_iOS/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>0.1.0</string>
	<key>CFBundleVersion</key>
	<string>0.1.0</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>arm64</string>
		<string>metal</string>
	</array>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
</dict>
</plist>

================
File: src-tauri/gen/apple/quibble_iOS/quibble_iOS.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict/>
</plist>

================
File: src-tauri/gen/apple/quibble.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BuildSystemType</key>
	<string>Original</string>
	<key>DisableBuildSystemDeprecationDiagnostic</key>
	<true/>
</dict>
</plist>

================
File: src-tauri/gen/apple/quibble.xcodeproj/project.xcworkspace/contents.xcworkspacedata
================
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>

================
File: src-tauri/gen/apple/quibble.xcodeproj/xcshareddata/xcschemes/quibble_iOS.xcscheme
================
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1430"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES"
      runPostActionsOnFailure = "NO">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "C2E297A836AEF6FF1FBD84BC"
               BuildableName = "quibble_iOS.app"
               BlueprintName = "quibble_iOS"
               ReferencedContainer = "container:quibble.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "NO"
      onlyGenerateCoverageForSpecifiedTargets = "NO">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "C2E297A836AEF6FF1FBD84BC"
            BuildableName = "quibble_iOS.app"
            BlueprintName = "quibble_iOS"
            ReferencedContainer = "container:quibble.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
      </Testables>
      <CommandLineArguments>
      </CommandLineArguments>
      <EnvironmentVariables>
         <EnvironmentVariable
            key = "RUST_BACKTRACE"
            value = "full"
            isEnabled = "YES">
         </EnvironmentVariable>
         <EnvironmentVariable
            key = "RUST_LOG"
            value = "info"
            isEnabled = "YES">
         </EnvironmentVariable>
      </EnvironmentVariables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "C2E297A836AEF6FF1FBD84BC"
            BuildableName = "quibble_iOS.app"
            BlueprintName = "quibble_iOS"
            ReferencedContainer = "container:quibble.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
      <CommandLineArguments>
      </CommandLineArguments>
      <EnvironmentVariables>
         <EnvironmentVariable
            key = "RUST_BACKTRACE"
            value = "full"
            isEnabled = "YES">
         </EnvironmentVariable>
         <EnvironmentVariable
            key = "RUST_LOG"
            value = "info"
            isEnabled = "YES">
         </EnvironmentVariable>
      </EnvironmentVariables>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "release"
      shouldUseLaunchSchemeArgsEnv = "NO"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "C2E297A836AEF6FF1FBD84BC"
            BuildableName = "quibble_iOS.app"
            BlueprintName = "quibble_iOS"
            ReferencedContainer = "container:quibble.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
      <CommandLineArguments>
      </CommandLineArguments>
      <EnvironmentVariables>
         <EnvironmentVariable
            key = "RUST_BACKTRACE"
            value = "full"
            isEnabled = "YES">
         </EnvironmentVariable>
         <EnvironmentVariable
            key = "RUST_LOG"
            value = "info"
            isEnabled = "YES">
         </EnvironmentVariable>
      </EnvironmentVariables>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>

================
File: src-tauri/gen/apple/Sources/quibble/bindings/bindings.h
================
#pragma once

namespace ffi {
    extern "C" {
        void start_app();
    }
}

================
File: src-tauri/gen/apple/Sources/quibble/main.mm
================
#include "bindings/bindings.h"

int main(int argc, char * argv[]) {
	ffi::start_app();
	return 0;
}

================
File: src-tauri/gen/apple/.gitignore
================
xcuserdata/
build/
Externals/

================
File: src-tauri/gen/apple/ExportOptions.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>debugging</string>
</dict>
</plist>

================
File: src-tauri/gen/apple/LaunchScreen.storyboard
================
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="17150" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES">
    <dependencies>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="17122"/>
        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
        <capability name="System colors in document resources" minToolsVersion="11.0"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="s0d-6b-0kx">
            <objects>
                <viewController id="Y6W-OH-hqX" sceneMemberID="viewController">
                    <view key="view" contentMode="scaleToFill" id="5EZ-qb-Rvc">
                        <rect key="frame" x="0.0" y="0.0" width="414" height="896"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <viewLayoutGuide key="safeArea" id="vDu-zF-Fre"/>
                        <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="Ief-a0-LHa" userLabel="First Responder" customClass="UIResponder" sceneMemberID="firstResponder"/>
            </objects>
        </scene>
    </scenes>
    <resources>
        <systemColor name="systemBackgroundColor">
            <color white="1" alpha="1" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
        </systemColor>
    </resources>
</document>

================
File: src-tauri/gen/apple/Podfile
================
# Uncomment the next line to define a global platform for your project

target 'quibble_iOS' do
platform :ios, '13.0'
  # Pods for quibble_iOS
end

target 'quibble_macOS' do
platform :osx, '11.0'
  # Pods for quibble_macOS
end

# Delete the deployment target for iOS and macOS, causing it to be inherited from the Podfile
post_install do |installer|
 installer.pods_project.targets.each do |target|
  target.build_configurations.each do |config|
   config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'
   config.build_settings.delete 'MACOSX_DEPLOYMENT_TARGET'
  end
 end
end

================
File: src-tauri/gen/apple/project.yml
================
name: quibble
options:
  bundleIdPrefix: com.quibble.app
  deploymentTarget:
    iOS: 13.0
fileGroups: [../../src]
configs:
  debug: debug
  release: release
settingGroups:
  app:
    base:
      PRODUCT_NAME: quibble
      PRODUCT_BUNDLE_IDENTIFIER: com.quibble.app
targetTemplates:
  app:
    type: application
    sources:
      - path: Sources
    scheme:
      environmentVariables:
        RUST_BACKTRACE: full
        RUST_LOG: info
    settings:
      groups: [app]
targets:
  quibble_iOS:
    type: application
    platform: iOS
    sources:
      - path: Sources
      - path: Assets.xcassets
      - path: Externals
      - path: quibble_iOS
      - path: assets
        buildPhase: resources
        type: folder
      - path: LaunchScreen.storyboard
    info:
      path: quibble_iOS/Info.plist
      properties:
        LSRequiresIPhoneOS: true
        UILaunchStoryboardName: LaunchScreen
        UIRequiredDeviceCapabilities: [arm64, metal]
        UISupportedInterfaceOrientations:
          - UIInterfaceOrientationPortrait
          - UIInterfaceOrientationLandscapeLeft
          - UIInterfaceOrientationLandscapeRight
        UISupportedInterfaceOrientations~ipad:
          - UIInterfaceOrientationPortrait
          - UIInterfaceOrientationPortraitUpsideDown
          - UIInterfaceOrientationLandscapeLeft
          - UIInterfaceOrientationLandscapeRight
        CFBundleShortVersionString: 0.1.0
        CFBundleVersion: 0.1.0
    entitlements:
      path: quibble_iOS/quibble_iOS.entitlements
    scheme:
      environmentVariables:
        RUST_BACKTRACE: full
        RUST_LOG: info
    settings:
      base:
        ENABLE_BITCODE: false
        ARCHS: [arm64, arm64-sim]
        VALID_ARCHS: arm64  arm64-sim
        LIBRARY_SEARCH_PATHS[arch=x86_64]: $(inherited) $(PROJECT_DIR)/Externals/x86_64/$(CONFIGURATION) $(SDKROOT)/usr/lib/swift $(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME) $(TOOLCHAIN_DIR)/usr/lib/swift-5.0/$(PLATFORM_NAME)
        LIBRARY_SEARCH_PATHS[arch=arm64]: $(inherited) $(PROJECT_DIR)/Externals/arm64/$(CONFIGURATION) $(SDKROOT)/usr/lib/swift $(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME) $(TOOLCHAIN_DIR)/usr/lib/swift-5.0/$(PLATFORM_NAME)
        LIBRARY_SEARCH_PATHS[arch=arm64-sim]: $(inherited) $(PROJECT_DIR)/Externals/arm64-sim/$(CONFIGURATION) $(SDKROOT)/usr/lib/swift $(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME) $(TOOLCHAIN_DIR)/usr/lib/swift-5.0/$(PLATFORM_NAME)
        ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES: true
        EXCLUDED_ARCHS[sdk=iphonesimulator*]: arm64
        EXCLUDED_ARCHS[sdk=iphoneos*]: arm64-sim x86_64
      groups: [app]
    dependencies:
      - framework: libapp.a
        embed: false
      - sdk: CoreGraphics.framework
      - sdk: Metal.framework
      - sdk: MetalKit.framework
      - sdk: QuartzCore.framework
      - sdk: Security.framework
      - sdk: UIKit.framework
      - sdk: WebKit.framework
    preBuildScripts:
      - script: npm run -- tauri ios xcode-script -v --platform ${PLATFORM_DISPLAY_NAME:?} --sdk-root ${SDKROOT:?} --framework-search-paths "${FRAMEWORK_SEARCH_PATHS:?}" --header-search-paths "${HEADER_SEARCH_PATHS:?}" --gcc-preprocessor-definitions "${GCC_PREPROCESSOR_DEFINITIONS:-}" --configuration ${CONFIGURATION:?} ${FORCE_COLOR} ${ARCHS:?}
        name: Build Rust Code
        basedOnDependencyAnalysis: false
        outputFiles:
          - $(SRCROOT)/Externals/x86_64/${CONFIGURATION}/libapp.a
          - $(SRCROOT)/Externals/arm64/${CONFIGURATION}/libapp.a
          - $(SRCROOT)/Externals/arm64-sim/${CONFIGURATION}/libapp.a

================
File: src-tauri/src/lib.rs
================
// Learn more about Tauri commands at https://tauri.app/develop/calling-rust/
#[tauri::command]
fn greet(name: &str) -> String {
    format!("Hello, {}! You've been greeted from Rust!", name)
}

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_opener::init())
        .invoke_handler(tauri::generate_handler![greet])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}

================
File: src-tauri/src/main.rs
================
// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

fn main() {
    quibble_lib::run()
}

================
File: src-tauri/.gitignore
================
# Generated by Cargo
# will have compiled files and executables
/target/

# Generated by Tauri
# will have schema files for capabilities auto-completion
/gen/schemas

================
File: src-tauri/build.rs
================
fn main() {
    tauri_build::build()
}

================
File: src-tauri/Cargo.toml
================
[package]
name = "quibble"
version = "0.1.0"
description = "A Tauri App"
authors = ["you"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# The `_lib` suffix may seem redundant but it is necessary
# to make the lib name unique and wouldn't conflict with the bin name.
# This seems to be only an issue on Windows, see https://github.com/rust-lang/cargo/issues/8519
name = "quibble_lib"
crate-type = ["staticlib", "cdylib", "rlib"]

[build-dependencies]
tauri-build = { version = "2", features = [] }

[dependencies]
tauri = { version = "2", features = ["macos-private-api"] }
tauri-plugin-opener = "2"
serde = { version = "1", features = ["derive"] }
serde_json = "1"

================
File: src-tauri/tauri.conf.json
================
{
    "$schema": "https://schema.tauri.app/config/2",
    "productName": "quibble",
    "version": "0.1.0",
    "identifier": "com.quibble.app",
    "build": {
        "beforeDevCommand": "bun run dev",
        "devUrl": "http://localhost:1420",
        "beforeBuildCommand": "bun run build",
        "frontendDist": "../dist"
    },
    "app": {
        "macOSPrivateApi": true,
        "windows": [
            {
                "windowEffects": {
                    "effects": ["underWindowBackground"]
                },
                "title": "Quibble",
                "width": 1000,
                "height": 600,
                "transparent": true,
                "center": true
            }
        ],
        "security": {
            "csp": null
        }
    },
    "bundle": {
        "active": true,
        "targets": "all",
        "icon": [
            "icons/32x32.png",
            "icons/128x128.png",
            "icons/128x128@2x.png",
            "icons/icon.icns",
            "icons/icon.ico"
        ]
    }
}

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

server/pb_data/*

================
File: biome.json
================
{
	"$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
	"vcs": { "enabled": true, "clientKind": "git", "useIgnoreFile": false },
	"files": { "ignoreUnknown": false, "ignore": [] },
	"formatter": {
		"enabled": true,
		"useEditorconfig": true,
		"formatWithErrors": false,
		"indentStyle": "space",
		"indentWidth": 4,
		"lineEnding": "lf",
		"lineWidth": 140,
		"attributePosition": "auto",
		"bracketSpacing": true,
		"ignore": ["**/node_modules"]
	},
	"organizeImports": { "enabled": true },
	"linter": {
		"enabled": true,
		"rules": {
			"recommended": false,
			"a11y": {
				"noAccessKey": "error",
				"noAriaUnsupportedElements": "error",
				"noAutofocus": "error",
				"noBlankTarget": "error",
				"noDistractingElements": "error",
				"noHeaderScope": "error",
				"noInteractiveElementToNoninteractiveRole": "error",
				"noLabelWithoutControl": "error",
				"noNoninteractiveElementToInteractiveRole": "error",
				"noNoninteractiveTabindex": "error",
				"noPositiveTabindex": "error",
				"noRedundantAlt": "error",
				"noRedundantRoles": "error",
				"useAltText": "error",
				"useAnchorContent": "error",
				"useAriaActivedescendantWithTabindex": "error",
				"useAriaPropsForRole": "error",
				"useFocusableInteractive": "error",
				"useHeadingContent": "error",
				"useHtmlLang": "error",
				"useIframeTitle": "error",
				"useKeyWithClickEvents": "error",
				"useKeyWithMouseEvents": "error",
				"useMediaCaption": "error",
				"useValidAnchor": "error",
				"useValidAriaProps": "error",
				"useValidAriaRole": "error",
				"useValidAriaValues": "error"
			},
			"complexity": {
				"noBannedTypes": "error",
				"noExtraBooleanCast": "error",
				"noMultipleSpacesInRegularExpressionLiterals": "error",
				"noUselessCatch": "error",
				"noUselessTypeConstraint": "error",
				"noWith": "error"
			},
			"correctness": {
				"noChildrenProp": "error",
				"noConstAssign": "error",
				"noConstantCondition": "error",
				"noEmptyCharacterClassInRegex": "error",
				"noEmptyPattern": "error",
				"noGlobalObjectCalls": "error",
				"noInnerDeclarations": "error",
				"noInvalidConstructorSuper": "error",
				"noNewSymbol": "error",
				"noNonoctalDecimalEscape": "error",
				"noPrecisionLoss": "error",
				"noSelfAssign": "error",
				"noSetterReturn": "error",
				"noSwitchDeclarations": "error",
				"noUndeclaredVariables": "error",
				"noUnreachable": "error",
				"noUnreachableSuper": "error",
				"noUnsafeFinally": "error",
				"noUnsafeOptionalChaining": "error",
				"noUnusedLabels": "error",
				"noUnusedVariables": "warn",
				"useArrayLiterals": "off",
				"useExhaustiveDependencies": "off",
				"useHookAtTopLevel": "error",
				"useIsNan": "error",
				"useJsxKeyInIterable": "error",
				"useValidForDirection": "error",
				"useYield": "error"
			},
			"security": { "noDangerouslySetInnerHtmlWithChildren": "error" },
			"style": {
				"noInferrableTypes": "warn",
				"noNamespace": "error",
				"noNonNullAssertion": "warn",
				"useAsConstAssertion": "error",
				"useConst": "warn"
			},
			"suspicious": {
				"noAsyncPromiseExecutor": "warn",
				"noCatchAssign": "error",
				"noClassAssign": "error",
				"noCommentText": "error",
				"noCompareNegZero": "error",
				"noControlCharactersInRegex": "error",
				"noDebugger": "error",
				"noDuplicateCase": "error",
				"noDuplicateClassMembers": "error",
				"noDuplicateJsxProps": "error",
				"noDuplicateObjectKeys": "error",
				"noDuplicateParameters": "error",
				"noEmptyBlockStatements": "error",
				"noExplicitAny": "off",
				"noExtraNonNullAssertion": "error",
				"noFallthroughSwitchClause": "error",
				"noFunctionAssign": "error",
				"noGlobalAssign": "error",
				"noImportAssign": "error",
				"noMisleadingCharacterClass": "error",
				"noMisleadingInstantiator": "error",
				"noPrototypeBuiltins": "warn",
				"noRedeclare": "error",
				"noShadowRestrictedNames": "error",
				"noSparseArray": "error",
				"noUnsafeNegation": "error",
				"useAwait": "off",
				"useGetterReturn": "error",
				"useNamespaceKeyword": "error",
				"useValidTypeof": "error"
			}
		},
		"ignore": [
			"**/node_modules",
			"**/webpack",
			"**/dist",
			"**/www",
			"**/lib",
			"**/.turbo",
			"**/build"
		]
	},
	"javascript": {
		"formatter": {
			"jsxQuoteStyle": "double",
			"quoteProperties": "asNeeded",
			"trailingCommas": "all",
			"semicolons": "always",
			"arrowParentheses": "asNeeded",
			"bracketSameLine": false,
			"quoteStyle": "single",
			"attributePosition": "auto",
			"bracketSpacing": true
		}
	},
	"overrides": [
		{
			"include": [
				"*.stories.@(ts|tsx|js|jsx|mjs|cjs)",
				"*.story.@(ts|tsx|js|jsx|mjs|cjs)"
			],
			"linter": { "rules": { "correctness": { "useHookAtTopLevel": "off" } } }
		},
		{
			"include": [".storybook/main.@(js|cjs|mjs|ts)"],
			"linter": { "rules": {} }
		},
		{
			"include": ["*.ts", "*.tsx", "*.mts", "*.cts"],
			"linter": {
				"rules": {
					"correctness": {
						"noConstAssign": "off",
						"noGlobalObjectCalls": "off",
						"noInvalidConstructorSuper": "off",
						"noNewSymbol": "off",
						"noSetterReturn": "off",
						"noUndeclaredVariables": "off",
						"noUnreachable": "off",
						"noUnreachableSuper": "off"
					},
					"style": {
						"noArguments": "error",
						"noVar": "error",
						"useConst": "error"
					},
					"suspicious": {
						"noDuplicateClassMembers": "off",
						"noDuplicateObjectKeys": "off",
						"noDuplicateParameters": "off",
						"noFunctionAssign": "off",
						"noImportAssign": "off",
						"noRedeclare": "off",
						"noUnsafeNegation": "off",
						"useGetterReturn": "off",
						"useValidTypeof": "off"
					}
				}
			}
		},
		{
			"include": [
				"*.stories.@(ts|tsx|js|jsx|mjs|cjs)",
				"*.story.@(ts|tsx|js|jsx|mjs|cjs)"
			],
			"linter": { "rules": { "correctness": { "useHookAtTopLevel": "off" } } }
		},
		{
			"include": [".storybook/main.@(js|cjs|mjs|ts)"],
			"linter": { "rules": {} }
		},
		{
			"include": ["*.ts", "*.tsx", "*.mts", "*.cts"],
			"linter": {
				"rules": {
					"correctness": {
						"noConstAssign": "off",
						"noGlobalObjectCalls": "off",
						"noInvalidConstructorSuper": "off",
						"noNewSymbol": "off",
						"noSetterReturn": "off",
						"noUndeclaredVariables": "off",
						"noUnreachable": "off",
						"noUnreachableSuper": "off"
					},
					"style": {
						"noArguments": "error",
						"noVar": "error",
						"useConst": "error"
					},
					"suspicious": {
						"noDuplicateClassMembers": "off",
						"noDuplicateObjectKeys": "off",
						"noDuplicateParameters": "off",
						"noFunctionAssign": "off",
						"noImportAssign": "off",
						"noRedeclare": "off",
						"noUnsafeNegation": "off",
						"useGetterReturn": "off",
						"useValidTypeof": "off"
					}
				}
			}
		}
	]
}

================
File: index.html
================
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/vite.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Quibble</title>
    </head>

    <body>
        <div id="root"></div>
        <script type="module" src="/src/main.tsx"></script>
    </body>
</html>

================
File: package.json
================
{
    "name": "quibble",
    "private": true,
    "version": "0.1.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "server": "cd ./server && go run cmd/main.go serve",
        "build": "tsc && vite build",
        "typegen": "pocketbase-typegen --db ./server/pb_data/data.db --out ./src/types/pb_types.ts",
        "preview": "vite preview",
        "tauri": "tauri"
    },
    "dependencies": {
        "@emotion/react": "^11.14.0",
        "@emotion/styled": "^11.14.0",
        "@hookform/resolvers": "^4.1.2",
        "@libsql/client": "^0.14.0",
        "@mui/icons-material": "^6.4.6",
        "@mui/material": "^6.4.7",
        "@mui/x-date-pickers": "^7.27.1",
        "@tauri-apps/api": "^2",
        "@tauri-apps/plugin-opener": "^2",
        "@tauri-apps/plugin-sql": "^2.2.0",
        "@types/react-virtualized": "^9.22.2",
        "@types/uuid": "^10.0.0",
        "chalk": "^5.4.1",
        "concurrently": "^9.1.2",
        "date-fns": "^4.1.0",
        "dotenv": "^16.4.7",
        "drizzle-orm": "^0.40.0",
        "elysia": "^1.2.22",
        "fs": "^0.0.1-security",
        "fuse.js": "^7.1.0",
        "jwt-decode": "^4.0.0",
        "lucide-react": "^0.477.0",
        "motion": "^12.5.0",
        "pocketbase": "^0.25.2",
        "react": "^18.3.1",
        "react-dnd": "^16.0.1",
        "react-dnd-html5-backend": "^16.0.1",
        "react-dom": "^18.3.1",
        "react-hook-form": "^7.54.2",
        "react-router": "^7.2.0",
        "react-scan": "^0.2.10",
        "react-virtualized": "^9.22.6",
        "reselect": "^5.1.1",
        "sonner": "^2.0.1",
        "uuid": "^11.1.0",
        "zod": "^3.24.2",
        "zustand": "^5.0.3"
    },
    "devDependencies": {
        "@tauri-apps/cli": "^2",
        "@types/bun": "^1.2.4",
        "@types/react": "^18.3.1",
        "@types/react-dom": "^18.3.1",
        "@types/reselect": "^2.2.0",
        "@vitejs/plugin-react": "^4.3.4",
        "drizzle-kit": "^0.30.5",
        "pocketbase-typegen": "^1.3.0",
        "typescript": "~5.6.2",
        "vite": "^6.0.3"
    }
}

================
File: README.md
================
# Tauri + React + Typescript

This template should help get you started developing with Tauri, React and Typescript in Vite.

## Recommended IDE Setup

- [VS Code](https://code.visualstudio.com/) + [Tauri](https://marketplace.visualstudio.com/items?itemName=tauri-apps.tauri-vscode) + [rust-analyzer](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer)

================
File: tsconfig.json
================
{
    "compilerOptions": {
        "target": "ES2020",
        "useDefineForClassFields": true,
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "module": "ESNext",
        "skipLibCheck": true,
        /* Bundler mode */
        "moduleResolution": "node",
        "allowImportingTsExtensions": true,
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "jsx": "react-jsx",
        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true
    },
    "include": ["src"]
    // "references": [{ "path": "./tsconfig.node.json" }]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import react from "@vitejs/plugin-react";
import { defineConfig } from "vite";

const host = process.env.TAURI_DEV_HOST;

// https://vitejs.dev/config/
export default defineConfig(async () => ({
    plugins: [react()],

    // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
    //
    // 1. prevent vite from obscuring rust errors
    clearScreen: false,
    // 2. tauri expects a fixed port, fail if that port is not available
    server: {
        port: 1420,
        strictPort: true,
        host: host || false,
        hmr: host
            ? {
                  protocol: "ws",
                  host,
                  port: 1421,
              }
            : undefined,
        watch: {
            // 3. tell vite to ignore watching `src-tauri`
            ignored: ["**/src-tauri/**"],
        },
    },
}));



================================================================
End of Codebase
================================================================
